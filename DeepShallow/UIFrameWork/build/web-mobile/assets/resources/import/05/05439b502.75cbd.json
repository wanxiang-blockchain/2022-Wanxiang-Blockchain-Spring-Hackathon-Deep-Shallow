[1,["ecpdLyjvZBwrvm+cedCcQy","2cUKS4Nr5GwYEuKPHnLEAC","baJ0oOS9hE445gDjMG1z0m","f40EKaadhPjIuUFmCRt434","0b+ZbMroFLOK5ZU4BgfIk6","1cOIHZGRVChrgmyK0ElRvj","8evKUlsOlAIr14puZYsT+5","a2MjXRFdtLlYQ5ouAFv/+R","56HGvtsttDtrl9S/+93lHZ","41D7kWhyFGY7q4NDlzkazn"],["node","_texture","_spriteFrame","_effectAsset","root","spShadow","camera","light","obstacle","Back","data"],[["cc.Node",["_name","_components","_prefab","_contentSize","_parent","_children","_trs","_color"],2,9,4,5,1,2,7,5],["cc.Node",["_name","_opacity","_groupIndex","_parent","_components","_prefab","_trs","_color","_contentSize","_children"],0,1,12,4,7,5,5,2],["cc.Sprite",["_sizeMode","_isTrimmedMode","node","_materials","_spriteFrame"],1,1,3,6],["cc.Node",["_name","_parent","_components","_prefab","_children","_contentSize","_trs"],2,1,2,4,2,5,7],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.Widget",["_alignFlags","_originalWidth","_originalHeight","node"],0,1],["cc.Material",["_name","_techniqueData"],1],["cc.Prefab",["_name"],2],["60605S7mGxLPaah0MJrhkSn",["node","obstacle","light","camera","spShadow"],3,1,1,1,1,1],["8c485spEilPeKnloxpdqCcq",["node","Back"],3,1,1],["cc.Mask",["_type","_N$alphaThreshold","node","_materials"],1,1,3],["cc.Camera",["_cullingMask","_nearClip","node"],1,1],["cc.Graphics",["_lineWidth","node","_materials","_strokeColor"],2,1,3,5],["58ad8KR/hRJi7EtoZ+PAyOU",["editing","node","_materials","_polygon","_texture"],2,1,3,12,6],["eaa90oCwvRPFqm2RBIJWdZL",["node"],3,1],["68edfvWcX9CWav9zMp303o6",["node","graphics"],3,1,1],["3eaf8iLxgtDEKVcEmFvrbqy",["_N$transition","node"],2,1],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[4,0,1,2,2],[0,0,4,1,2,7,3,6,2],[13,0,1,2,3,4,2],[5,0,3,2],[6,0,1,3],[0,0,4,1,2,3,2],[2,0,2,3,4,2],[17,0,1,2,4],[7,0,2],[0,0,5,1,2,3,2],[0,0,4,5,1,2,6,2],[0,0,4,5,1,2,3,2],[1,0,3,9,4,5,6,2],[1,0,1,3,4,5,7,8,3],[1,0,2,3,4,5,7,6,3],[1,0,3,4,5,8,6,2],[3,0,1,4,2,3,5,6,2],[3,0,1,2,3,2],[8,0,1,2,3,4,1],[9,0,1,1],[4,1,2,1],[5,0,1,2,3,4],[10,0,1,2,3,3],[2,2,3,4,1],[2,0,1,2,3,3],[11,0,1,2,3],[12,0,1,2,3,2],[14,0,1],[15,0,1,1],[16,0,1,2]],[[[[4,"MShadow",{"0":{"defines":{"USE_TEXTURE":true}}}]],0,0,[0],[3],[2]],[[[4,"MLight",{"0":{"defines":{}}}]],0,0,[0],[3],[3]],[[[8,"UILight"],[9,"UILight",[-9,-10,-11,-12,-13,-14,-15],[[18,-6,-5,-4,-3,-2],[19,-8,-7]],[20,-1,0],[5,700,600]],[12,"obstacle",1,[-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28],[[-16,[3,12,-17]],1,4],[0,"c73R3tH5JIrYqZbBWtQPQS",1,0],[-350,-300,0,0,0,0,1,1,1,1]],[13,"shadow",225.165,1,[[-29,[21,45,40,36,-30]],1,4],[0,"806gJEmXpHboC6O8RQSb5v",1,0],[4,4278190080],[5,700,600]],[14,"graphics",1,1,[[-31,[3,12,-32]],1,4],[0,"a0WGMJVi5NGpgqnvFEdKg4",1,0],[4,4278190080],[-350,-300,0,0,0,0,1,1,1,1]],[10,"New Node",1,[-34],[[3,12,-33]],[0,"5aO618mVNJboHltZC48twc",1,0],[-350,-300,0,0,0,0,1,1,1,1]],[16,"light",5,[-36],[-35],[0,"d5j9XasDNLkaVgsZFW+7BX",1,0],[5,15,15],[286.138,129.944,0,0,0,0,1,1,1,1]],[11,"New Node",6,[-38],[[22,1,0,-37,[28]]],[0,"9autO3rN1GsrAtuUy+jJoM",1,0],[5,15,15]],[15,"_ButtonPlus$Back",1,[[[23,-39,[29],30],-40],4,1],[0,"b0MGiw6KZDmKIn9XxDjdCc",1,0],[5,50,49],[-318.973,268.405,0,0,0,0,1,1,1,0]],[17,"New 2D Camera",1,[-41],[0,"1eSq6n/ZdN9JFWd3tg8tJ3",1,0]],[25,2,0.1,9],[5,"bg",1,[[6,0,-42,[0],1]],[0,"c3RE/gYK5GcpCbYauBACUO",1,0],[5,720,620]],[24,0,false,3,[2]],[26,1,4,[3],[4,4294967295]],[1,"TexturePlus",2,[[2,true,-43,[4],[[[0,-0.4363227708310191,-38.38789172200953],[0,46.98049062105534,-24.40577361259343],[0,27.76606017174428,37.83240237625536],[0,-49.32096221231915,30.920655673787184],[0,-68.1010833784668,-7.811023867953468]],8,8,8,8,8],5]],[0,"acDFKMAZ5F9rBPnwa7Lx8f",1,0],[4,4287927463],[5,200,100],[490.67,346.521,0,0,0,0,1,1,1,1]],[1,"TexturePlus",2,[[2,true,-44,[6],[[[0,-59.84278390203921,-32.54289302643025],[0,46.59247211670478,-31.38356346191565],[0,29.04862989304307,23.321333331856753],[0,-76.86652132764229,14.637570709189653]],8,8,8,8],7]],[0,"c2OgeJ3gBGsZ1G35MuUnWm",1,0],[4,4290098625],[5,200,100],[193.206,353.834,0,0,0,0,1,1,1,1]],[1,"TexturePlus",2,[[2,true,-45,[8],[[[0,-23.798625279300346,-33.517059475693465],[0,36.85080762407266,-30.409397012652438],[0,-4.073029381906153,27.2179991289096],[0,-76.86652132764229,14.637570709189653]],8,8,8,8],9]],[0,"70sdco6VRMvqNZvXT18UPu",1,0],[4,4290098625],[5,200,100],[235.095,203.812,0,0,0,0,1,1,1,1]],[1,"TexturePlus",2,[[2,true,-46,[10],[[[0,-35.488622670458895,-29.62039367864061],[0,7.625814146176289,-19.6935660707571],[0,-23.556358367170404,34.03716427375209],[0,-49.58986074827234,3.9217397672943157]],8,8,8,8],11]],[0,"59vG+Zc4hD6pB3FxuEbypP",1,0],[4,4290098625],[5,200,100],[364.659,407.413,0,0,0,0,1,1,1,1]],[1,"TexturePlus",2,[[2,true,-47,[12],[[[0,-69.58444839467133,-40.33622462053595],[0,36.85080762407266,-30.409397012652438],[0,-0.1763635848533034,23.32133333185675],[0,-55.434859443851614,23.405068752558563]],8,8,8,8],13]],[0,"e7pbcQclZHYockH/TvtsKy",1,0],[4,4290098625],[5,200,100],[475.714,213.554,0,0,0,0,1,1,1,1]],[1,"TexturePlus",2,[[2,true,-48,[14],[[[0,-35.488622670458895,-29.62039367864061],[0,7.625814146176289,-19.6935660707571],[0,-23.556358367170404,34.03716427375209],[0,-49.58986074827234,3.9217397672943157]],8,8,8,8],15]],[0,"6dJPDpMAhDbrFyTd2+3d1G",1,0],[4,4290098625],[5,200,100],[64.786,266.459,0,0,0,0,1,1,1,1]],[1,"TexturePlus",2,[[2,true,-49,[16],[[[0,-69.58444839467133,-40.33622462053595],[0,36.85080762407266,-30.409397012652438],[0,-0.1763635848533034,23.32133333185675],[0,-55.434859443851614,23.405068752558563]],8,8,8,8],17]],[0,"7f0gIrChZFMb69/65wK3IO",1,0],[4,4290098625],[5,200,100],[175.841,72.6,0,0,0,0,1,1,1,1]],[1,"TexturePlus",2,[[2,true,-50,[18],[[[0,-35.488622670458895,-29.62039367864061],[0,7.625814146176289,-19.6935660707571],[0,-23.556358367170404,34.03716427375209],[0,-49.58986074827234,3.9217397672943157]],8,8,8,8],19]],[0,"d8zsk8G3tNeJXjo/p4eBeh",1,0],[4,4290098625],[5,200,100],[540.161,486.182,0,0,0,0,1,1,1,1]],[1,"TexturePlus",2,[[2,true,-51,[20],[[[0,-69.58444839467133,-40.33622462053595],[0,36.85080762407266,-30.409397012652438],[0,-0.1763635848533034,23.32133333185675],[0,-55.434859443851614,23.405068752558563]],8,8,8,8],21]],[0,"bekFbUh0JK15f/yokyLtmC",1,0],[4,4290098625],[5,200,100],[651.216,292.323,0,0,0,0,1,1,1,1]],[1,"TexturePlus",2,[[2,true,-52,[22],[[[0,-35.488622670458895,-29.62039367864061],[0,7.625814146176289,-19.6935660707571],[0,-23.556358367170404,34.03716427375209],[0,-49.58986074827234,3.9217397672943157]],8,8,8,8],23]],[0,"86/VxO5R5NWrGmr/BgsAZW",1,0],[4,4290098625],[5,200,100],[252.725,501.383,0,0,0,0,1,1,1,1]],[1,"TexturePlus",2,[[2,true,-53,[24],[[[0,-35.488622670458895,-29.62039367864061],[0,7.625814146176289,-19.6935660707571],[0,-23.556358367170404,34.03716427375209],[0,-49.58986074827234,3.9217397672943157]],8,8,8,8],25]],[0,"b5+S8gDp9BRKOss839zPK3",1,0],[4,4290098625],[5,200,100],[584.382,107.54,0,0,0,0,1,1,1,1]],[27,2],[5,"New Sprite(Splash)",7,[[6,0,-54,[26],27]],[0,"efgdT5FAZPT4lVLz4cwdw9",1,0],[5,20,20]],[28,6,13],[29,3,8]],0,[0,4,1,0,5,12,0,6,10,0,7,27,0,8,25,0,0,1,0,9,28,0,0,1,0,-1,9,0,-2,11,0,-3,3,0,-4,4,0,-5,2,0,-6,5,0,-7,8,0,-1,25,0,0,2,0,-1,14,0,-2,15,0,-3,16,0,-4,17,0,-5,18,0,-6,19,0,-7,20,0,-8,21,0,-9,22,0,-10,23,0,-11,24,0,-1,12,0,0,3,0,-1,13,0,0,4,0,0,5,0,-1,6,0,-1,27,0,-1,7,0,0,7,0,-1,26,0,0,8,0,-2,28,0,-1,10,0,0,11,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,26,0,10,1,54],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],[-1,2,-1,-1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,2,-1,-1,2,2],[0,4,5,6,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,7,0,0,8,9]],[[[7,"EShadow",[{"hash":999245211,"record":null,"name":"EShadow|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nvoid main () {\n  vec4 o = vec4(1.0, 1.0, 1.0, 1.0);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  o.a = 1.0 - o.a;\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nvoid main () {\n  vec4 o = vec4(1.0, 1.0, 1.0, 1.0);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  o.a = 1.0 - o.a;\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"passes":[{"program":"EShadow|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[[7,"ELight",[{"hash":903445354,"record":null,"name":"ELight|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin float a_dist;\nout float v_dist;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_color = a_color;\n  v_dist = a_dist;\n  gl_Position = pos;\n}","frag":"\n#if CC_SUPPORT_standard_derivatives\n  #extension GL_OES_standard_derivatives : enable\n#endif\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform Props {\n  vec2 screen;\n  vec2 lightPos;\n  float maxRadius;\n};\nin vec4 v_color;\nin float v_dist;\nvoid main () {\n  vec4 o = v_color;\n  vec2 st = gl_FragCoord.xy / screen.xy;\n  float scaleWH = screen.x / screen.y;\n  ALPHA_TEST(o);\n  vec2 diff = st - lightPos;\n  float radius = length(vec2(abs(diff.x) * scaleWH, abs(diff.y)));\n  o.a = 1.0 - smoothstep(0.0, maxRadius, radius);\n  o.a = pow(o.a, 0.5);\n  #if CC_SUPPORT_standard_derivatives\n    float aa = fwidth(v_dist);\n  #else\n    float aa = 0.05;\n  #endif\n  float alpha = 1. - smoothstep(-aa, 0., abs(v_dist) - 1.0);\n  o.rgb *= o.a;\n  o *= alpha;\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute float a_dist;\nvarying float v_dist;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_color = a_color;\n  v_dist = a_dist;\n  gl_Position = pos;\n}","frag":"\n#if CC_SUPPORT_standard_derivatives\n  #extension GL_OES_standard_derivatives : enable\n#endif\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec2 screen;\nuniform vec2 lightPos;\nuniform float maxRadius;\nvarying vec4 v_color;\nvarying float v_dist;\nvoid main () {\n  vec4 o = v_color;\n  vec2 st = gl_FragCoord.xy / screen.xy;\n  float scaleWH = screen.x / screen.y;\n  ALPHA_TEST(o);\n  vec2 diff = st - lightPos;\n  float radius = length(vec2(abs(diff.x) * scaleWH, abs(diff.y)));\n  o.a = 1.0 - smoothstep(0.0, maxRadius, radius);\n  o.a = pow(o.a, 0.5);\n  #if CC_SUPPORT_standard_derivatives\n    float aa = fwidth(v_dist);\n  #else\n    float aa = 0.05;\n  #endif\n  float alpha = 1. - smoothstep(-aa, 0., abs(v_dist) - 1.0);\n  o.rgb *= o.a;\n  o *= alpha;\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_SUPPORT_standard_derivatives","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Props","binding":1,"members":[{"name":"screen","type":14,"count":1},{"name":"lightPos","type":14,"count":1},{"name":"maxRadius","type":13,"count":1}],"defines":[]}],"samplers":[]}],[{"passes":[{"program":"ELight|vs|fs","blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":771,"blendSrcAlpha":1,"blendDstAlpha":771}]},"rasterizerState":{"cullMode":0},"properties":{"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]]]]