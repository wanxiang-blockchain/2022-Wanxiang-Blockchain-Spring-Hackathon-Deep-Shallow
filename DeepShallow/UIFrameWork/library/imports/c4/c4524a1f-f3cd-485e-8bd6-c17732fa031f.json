{
  "__type__": "cc.TextAsset",
  "_name": "observableobject.d",
  "_objFlags": 0,
  "_native": "",
  "text": "import { CreateObservableOptions, Annotation, ComputedValue, IAtom, IComputedValueOptions, IEnhancer, IInterceptable, IListenable, Lambda, ObservableValue } from \"../mobx\";\r\nexport declare type IObjectDidChange<T = any> = {\r\n    observableKind: \"object\";\r\n    name: PropertyKey;\r\n    object: T;\r\n    debugObjectName: string;\r\n} & ({\r\n    type: \"add\";\r\n    newValue: any;\r\n} | {\r\n    type: \"update\";\r\n    oldValue: any;\r\n    newValue: any;\r\n} | {\r\n    type: \"remove\";\r\n    oldValue: any;\r\n});\r\nexport declare type IObjectWillChange<T = any> = {\r\n    object: T;\r\n    type: \"update\" | \"add\";\r\n    name: PropertyKey;\r\n    newValue: any;\r\n} | {\r\n    object: T;\r\n    type: \"remove\";\r\n    name: PropertyKey;\r\n};\r\nexport declare class ObservableObjectAdministration implements IInterceptable<IObjectWillChange>, IListenable {\r\n    target_: any;\r\n    values_: Map<string | number | symbol, ObservableValue<any> | ComputedValue<any>>;\r\n    name_: string;\r\n    defaultAnnotation_: Annotation;\r\n    keysAtom_: IAtom;\r\n    changeListeners_: any;\r\n    interceptors_: any;\r\n    proxy_: any;\r\n    isPlainObject_: boolean;\r\n    appliedAnnotations_?: object;\r\n    private pendingKeys_;\r\n    constructor(target_: any, values_: Map<string | number | symbol, ObservableValue<any> | ComputedValue<any>>, name_: string, defaultAnnotation_?: Annotation);\r\n    getObservablePropValue_(key: PropertyKey): any;\r\n    setObservablePropValue_(key: PropertyKey, newValue: any): boolean | null;\r\n    get_(key: PropertyKey): any;\r\n    /**\r\n     * @param {PropertyKey} key\r\n     * @param {any} value\r\n     * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is\r\n     * @param {boolean} proxyTrap whether it's called from proxy trap\r\n     * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n     */\r\n    set_(key: PropertyKey, value: any, proxyTrap?: boolean): boolean | null;\r\n    has_(key: PropertyKey): boolean;\r\n    /**\r\n     * @param {PropertyKey} key\r\n     * @param {Annotation|boolean} annotation true - use default annotation, false - ignore prop\r\n     */\r\n    make_(key: PropertyKey, annotation: Annotation | boolean): void;\r\n    /**\r\n     * @param {PropertyKey} key\r\n     * @param {PropertyDescriptor} descriptor\r\n     * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is\r\n     * @param {boolean} proxyTrap whether it's called from proxy trap\r\n     * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n     */\r\n    extend_(key: PropertyKey, descriptor: PropertyDescriptor, annotation: Annotation | boolean, proxyTrap?: boolean): boolean | null;\r\n    /**\r\n     * @param {PropertyKey} key\r\n     * @param {PropertyDescriptor} descriptor\r\n     * @param {boolean} proxyTrap whether it's called from proxy trap\r\n     * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n     */\r\n    defineProperty_(key: PropertyKey, descriptor: PropertyDescriptor, proxyTrap?: boolean): boolean | null;\r\n    defineObservableProperty_(key: PropertyKey, value: any, enhancer: IEnhancer<any>, proxyTrap?: boolean): boolean | null;\r\n    defineComputedProperty_(key: PropertyKey, options: IComputedValueOptions<any>, proxyTrap?: boolean): boolean | null;\r\n    /**\r\n     * @param {PropertyKey} key\r\n     * @param {PropertyDescriptor} descriptor\r\n     * @param {boolean} proxyTrap whether it's called from proxy trap\r\n     * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n     */\r\n    delete_(key: PropertyKey, proxyTrap?: boolean): boolean | null;\r\n    /**\r\n     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.\r\n     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\r\n     * for callback details\r\n     */\r\n    observe_(callback: (changes: IObjectDidChange) => void, fireImmediately?: boolean): Lambda;\r\n    intercept_(handler: any): Lambda;\r\n    notifyPropertyAddition_(key: PropertyKey, value: any): void;\r\n    ownKeys_(): PropertyKey[];\r\n    keys_(): PropertyKey[];\r\n}\r\nexport interface IIsObservableObject {\r\n    $mobx: ObservableObjectAdministration;\r\n}\r\nexport declare function asObservableObject(target: any, options?: CreateObservableOptions): IIsObservableObject;\r\nexport declare function isObservableObject(thing: any): boolean;\r\nexport declare function recordAnnotationApplied(adm: ObservableObjectAdministration, annotation: Annotation, key: PropertyKey): void;\r\n"
}