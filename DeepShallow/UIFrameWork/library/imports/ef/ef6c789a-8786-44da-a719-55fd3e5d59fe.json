{
  "__type__": "cc.TextAsset",
  "_name": "wx.d",
  "_objFlags": 0,
  "_native": "",
  "text": "/**\n * 取消一个先前通过调用 requestAnimationFrame 方法添加到计划中的动画帧请求\n */\ndeclare function cancelAnimationFrame(requestID: number): void;\n\n/**\n * 在下次进行重绘时执行。\n */\ndeclare function requestAnimationFrame(callback: () => void): number;\n\n/** 输出日志*/\ninterface Console {\n    debug(message?: any, ...optionalParams: any[]): void;\n    error(message?: any, ...optionalParams: any[]): void;\n    group(groupTitle?: string, ...optionalParams: any[]): void;\n    groupEnd(): void;\n    info(message?: any, ...optionalParams: any[]): void;\n    log(message?: any, ...optionalParams: any[]): void;\n    warn(message?: any, ...optionalParams: any[]): void;\n}\n\n/** 输出日志*/\ndeclare var Console: {\n    prototype: Console;\n    new(): Console;\n};\n\ndeclare var console: Console;\n/**\n * 可取消由 setTimeout() 方法设置的定时器。\n */\ndeclare function clearTimeout(timeoutID: number): void;\n\n/**\n * 可取消由 setInterval() 方法设置的定时器。\n */\ndeclare function clearInterval(intervalID: number): void;\n\n/**\n * 设定一个定时器，在定时到期以后执行注册的回调函数\n * @param callback 回调函数\n * @param delay 延迟的时间，函数的调用会在该延迟之后发生，单位 ms。\n * @param rest param1, param2, ..., paramN 等附加参数，它们会作为参数传递给回调函数。\n * @returns number定时器的编号。这个值可以传递给 clearTimeout 来取消该定时。\n */\ndeclare function setTimeout(callback: () => void, delay: number, ...rest): number;\n\n/**\n * 设定一个定时器，按照指定的周期（以毫秒计）来执行注册的回调函数\n * @param callback 回调函数\n * @param delay 执行回调函数之间的时间间隔，单位 ms。\n * @param rest param1, param2, ..., paramN 等附加参数，它们会作为参数传递给回调函数。\n * @returns number定时器的编号。这个值可以传递给 clearTimeout 来取消该定时。\n */\ndeclare function setInterval(callback: () => void, delay: number, ...rest): number;\n\n/**\n * 微信小游戏命名空间\n */\ndeclare namespace wx {\n\n    type systemInfo = {\n        /** 手机品牌*/\n        brand: string;\n        /** 手机型号*/\n        model: string;\n        /**\t设备像素比 */\n        pixelRatio: number;\n        /** 屏幕宽度*/\n        screenWidth: number;\n        /** 屏幕高度*/\n        screenHeight: number;\n        /** 可使用窗口宽度*/\n        windowWidth: number;\n        /** 可使用窗口高度*/\n        windowHeight: number;\n        /** 状态栏的高度*/\n        statusBarHeight: number;\n        /** 微信设置的语言*/\n        language: string;\n        /** 微信版本号*/\n        version: string;\n        /** 操作系统版本*/\n        system: string;\n        /** 客户端平台*/\n        platform: string\n        /** 用户字体大小设置。以“我-设置 - 通用 - 字体大小”中的设置为准，单位 px。*/\n        fontSizeSetting: number;\n        /** 客户端基础库版本*/\n        SDKVersion: string;\n        /** 性能等级*/\n        benchmarkLevel: number;\n    }\n\n    type launchOption = {\n        /** 启动小游戏的场景值*/\n        scene: number;\n        /** 启动小游戏的 query 参数\t*/\n        query: Object;\n        /** 当前小游戏是否被显示在聊天顶部*/\n        referrerInfo: ReferrerInfo\n        /** shareTicket，详见获取更多转发信息*/\n        shareTicket: string;\n    }\n\n    type ReferrerInfo = {\n        /** 来源小程序或公众号或App的 appId\t*/\n        appId: string,\n        /**  来源小程序传过来的数据，scene=1037或1038时支持*/\n        extraData: any\n    }\n\n    /**\n     * UpdateManager 对象，用来管理更新，可通过 wx.getUpdateManager 接口获取实例。\n     */\n    type UpdateManager = {\n        /**\n         * 强制小程序重启并使用新版本。在小程序新版本下载完成后（即收到 onUpdateReady 回调）调用。\n         */\n        applyUpdate(): void;\n        /**\n         * 监听向微信后台请求检查更新结果事件。微信在小程序冷启动时自动检查更新，不需由开发者主动触发。\n         * @param callback 向微信后台请求检查更新结果事件的回调函数\n         */\n        onCheckForUpdate(callback: (res: { hasUpdate: boolean }) => void): void;\n        /**\n         * 监听小程序有版本更新事件。客户端主动触发下载（无需开发者触发），下载成功后回调\n         * @param callback 小程序有版本更新事件的回调函数\n         */\n        onUpdateReady(callback: () => void): void;\n        /**\n         * 监听小程序更新失败事件。小程序有新版本，客户端主动触发下载（无需开发者触发），下载失败（可能是网络原因等）后回调\n         * @param callback 小程序更新失败事件的回调函数\n         */\n        onUpdateFailed(callback: () => void): void;\n    }\n\n    /**\n     * 在触控设备上的触摸点。通常是指手指或者触控笔在触屏设备或者触摸板上的操作。\n     */\n    type Touch = {\n        /** Touch 对象的唯一标识符，只读属性。一次触摸动作(我们值的是手指的触摸)在平面上移动的整个过程中, 该标识符不变。可以根据它来判断跟踪的是否是同一次触摸过程。*/\n        identifier: number\n        /** 触点相对于屏幕左边沿的 X 坐标。*/\n        screenX: number\n        /** 触点相对于屏幕上边沿的 Y 坐标。*/\n        screenY: number\n    }\n\n    /**\n     * 性能管理器\n     */\n    type Performance = {\n        /**\n         * 可以获取当前时间以微秒为单位的时间戳\n         */\n        now(): number;\n    }\n\n    /**\n     * 加载分包任务实例，用于获取分包加载状态\n     */\n    type LoadSubpackageTask = {\n        /**\n         * 监听分包加载进度变化事件\n         * @param callback 分包加载进度变化事件的回调函数\n         */\n        onProgressUpdate(callback: (res: {\n            /** 分包下载进度百分比*/\n            progress: number\n            /** 已经下载的数据长度，单位 Bytes\t*/\n            totalBytesWritten: number\n            /** 预期需要下载的数据总长度，单位 Bytes*/\n            totalBytesExpectedToWrite: number\n        }) => void): void\n    }\n\n    /**\n     * 通过 Canvas.getContext('2d') 接口可以获取 CanvasRenderingContext2D 对象，实现了 HTML Canvas 2D Context 定义的大部分属性、方法。\n     * 通过 Canvas.getContext('webgl') 接口可以获取 WebGLRenderingContext 对象，实现了 WebGL 1.0 定义的所有属性、方法、常量。\n     * 2d 接口支持情况\n     * iOS/Android 不支持的 2d 属性和接口\n\n     * globalCompositeOperation 不支持以下值： source-in source-out destination-atop lighter copy。如果使用，不会报错，但是将得到与预期不符的结果。\n     * isPointInPath\n     * WebGL 接口支持情况\n     * iOS/Android 不支持的 WebGL 接口\n\n     * pixelStorei 当第一个参数是 gl.UNPACK_COLORSPACE_CONVERSION_WEBGL 时\n     * compressedTexImage2D\n     * compressedTexSubImage2D\n     * 除此之外 Android 还不支持 WebGL 接口\n\n     * getExtension\n     * getSupportedExtensions\n     */\n    interface RenderingContext { }\n\n    interface Canvas {\n        /** 画布的宽度*/\n        width: number;\n        /** 画布的高度*/\n        height: number;\n\n        /**\n         * 获取画布对象的绘图上下文\n         */\n        getContext(contextType: '2d' | 'webgl', contextAttributes: { antialias?: boolean, preserveDrawingBuffer?: boolean, antialiasSamples?: 2 }): RenderingContext;\n        /**\n         * 将当前 Canvas 保存为一个临时文件，并生成相应的临时文件路径。\n         */\n        toTempFilePath(object: { x?: number, y?: number, width?: number, height?: number, destWidth?: number, destHeight?: number, fileType?: 'jpg' | 'png', quality?: number, success?: (res?: any) => void, fail?: (err?: any) => void, complete?: (res?: any) => void }): string;\n        /**\n         * 把画布上的绘制内容以一个 data URI 的格式返回\n         */\n        toDataURL(): string;\n        /**\n         * Canvas.toTempFilePath 的同步版本\n         */\n        toTempFilePathSync(object: { x?: number, y?: number, width?: number, height?: number, destWidth?: number, destHeight?: number, fileType?: 'jpg' | 'png', quality?: number }): void;\n    }\n\n    /**\n     * 获取系统信息\n     */\n    function getSystemInfo(object: { success: (res?: systemInfo) => void, fail: (err?: any) => void, complete: (res?: any) => void }): void;\n\n    /**\n     * wx.getSystemInfo 的同步版本\n     */\n    function getSystemInfoSync(): systemInfo;\n\n    /**\n     * 返回值 UpdateManager\n     */\n    function getUpdateManager(): UpdateManager;\n\n    /**\n     * 退出当前小游戏\n     */\n    function exitMiniProgram(object: { success?: () => void, fail?: () => void, complete?: () => void }): void;\n\n    /**\n    * 返回小程序启动参数\n    */\n    function getLaunchOptionsSync(): launchOption;\n    /**\n     * 监听小游戏隐藏到后台事件。锁屏、按 HOME 键退到桌面、显示在聊天顶部等操作会触发此事件。\n     */\n    function onHide(callback: () => void): void;\n    /**\n     * 取消监听小游戏隐藏到后台事件。锁屏、按 HOME 键退到桌面、显示在聊天顶部等操作会触发此事件。\n     */\n    function offHide(callback: () => void): void;\n    /**\n     * 监听小游戏回到前台的事件\n     */\n    function onShow(callback: (res: {\n        /** 场景值*/\n        scene: string,\n        /** 查询参数*/\n        query: any,\n        /** shareTicket*/\n        shareTicket: string,\n        /** 当场景为由从另一个小程序或公众号或App打开时，返回此字段*/\n        referrerInfo: ReferrerInfo\n    }) => void): void;\n    /**\n     * 取消监听小游戏回到前台的事件\n     */\n    function offShow(callback: () => void): void;\n\n    /**\n    * 监听音频中断结束，在收到 onAudioInterruptionBegin 事件之后，小程序内所有音频会暂停，收到此事件之后才可再次播放成功\n    */\n    function onAudioInterruptionEnd(callback: () => void): void;\n    /**\n     * 取消监听音频中断结束，在收到 onAudioInterruptionBegin 事件之后，小程序内所有音频会暂停，收到此事件之后才可再次播放成功\n     */\n    function offAudioInterruptionEnd(callback: () => void): void;\n    /**\n     * 监听音频因为受到系统占用而被中断开始，以下场景会触发此事件：闹钟、电话、FaceTime 通话、微信语音聊天、微信视频聊天。此事件触发后，小程序内所有音频会暂停。\n     */\n    function onAudioInterruptionBegin(callback: () => void): void;\n    /**\n     * 取消监听音频因为受到系统占用而被中断开始，以下场景会触发此事件：闹钟、电话、FaceTime 通话、微信语音聊天、微信视频聊天。此事件触发后，小程序内所有音频会暂停。\n     */\n    function offAudioInterruptionBegin(callback: () => void): void;\n    /**\n     * 监听全局错误事件\n     */\n    function onError(callback: (res: {\n        /** 错误*/\n        message: string,\n        /** 错误调用堆栈*/\n        stack: string\n    }) => void): void;\n    /**\n     * 取消监听全局错误事件\n     */\n    function offError(callback: () => void): void;\n\n    /**\n     * 监听开始触摸事件\n     */\n    function onTouchStart(callback: (res: {\n        /** 当前所有触摸点的列表*/\n        touches: Array<Touch>,\n        /** 触发此次事件的触摸点列表*/\n        changedTouches: Array<Touch>,\n        /** 事件触发时的时间戳*/\n        timeStamp: number\n    }) => void): void;\n    /**\n     * 取消监听开始触摸事件\n     */\n    function offTouchStart(callback: () => void): void;\n    /**\n     * 监听触点移动事件\n     */\n    function onTouchMove(callback: (res: {\n        /** 当前所有触摸点的列表*/\n        touches: Array<Touch>,\n        /** 触发此次事件的触摸点列表*/\n        changedTouches: Array<Touch>,\n        /** 事件触发时的时间戳*/\n        timeStamp: number\n    }) => void): void;\n    /**\n     * 取消监听触点移动事件\n     */\n    function offTouchMove(callback: () => void): void;\n    /**\n     * 监听触摸结束事件\n     */\n    function onTouchEnd(callback: (res: {\n        /** 当前所有触摸点的列表*/\n        touches: Array<Touch>,\n        /** 触发此次事件的触摸点列表*/\n        changedTouches: Array<Touch>,\n        /** 事件触发时的时间戳*/\n        timeStamp: number\n    }) => void): void;\n    /**\n     * 取消监听触摸结束事件\n     */\n    function offTouchEnd(callback: () => void): void;\n    /**\n     * 监听触点失效事件\n     */\n    function onTouchCancel(callback: (res: {\n        /** 当前所有触摸点的列表*/\n        touches: Array<Touch>,\n        /** 触发此次事件的触摸点列表*/\n        changedTouches: Array<Touch>,\n        /** 事件触发时的时间戳*/\n        timeStamp: number\n    }) => void): void;\n    /**\n     * 取消监听触点失效事件\n     */\n    function offTouchCancel(callback: () => void): void;\n\n    /**\n    * 获取性能管理器\n    */\n    function getPerformance(): Performance;\n    /**\n     * 加快触发 JavaScrpitCore Garbage Collection（垃圾回收），GC 时机是由 JavaScrpitCore 来控制的，并不能保证调用后马上触发 GC。\n     */\n    function triggerGC(): void;\n\n    /**\n     *  基础库 2.1.0 开始支持，低版本需做兼容处理。\n     *  触发分包加载，详见 分包加载\n     */\n    function loadSubpackage(res: {\n        /** 分包的名字，可以填 name 或者 root*/\n        name: () => void,\n        /** 分包加载成功回调事件*/\n        success: () => void,\n        /** 分包加载失败回调事件*/\n        fail: () => void,\n        /** 分包加载结束回调事件(加载成功、失败都会执行）*/\n        complete: () => void\n    }): LoadSubpackageTask;\n\n    /**\n     * 基础库 1.4.0 开始支持，低版本需做兼容处理。\n     * 设置是否打开调试开关。此开关对正式版也能生效。\n     */\n    function setEnableDebug(res: {\n        /** 是否打开调试*/\n        enableDebug: boolean,\n        /** 接口调用成功的回调函数*/\n        success?: () => void,\n        /** 接口调用失败的回调函数*/\n        fail?: () => void,\n        /** 接口调用结束的回调函数（调用成功、失败都会执行）*/\n        complete?: () => void\n    }): void;\n\n    /**\n     * 创建一个画布对象。首次调用创建的是显示在屏幕上的画布，之后调用创建的都是离屏画布。\n     */\n    function createCanvas(): Canvas;\n\n    /**\n     * 可以修改渲染帧率。默认渲染帧率为 60 帧每秒。修改后，requestAnimationFrame 的回调频率会发生改变。\n     */\n    function setPreferredFramesPerSecond(fps: number): void;\n\n    /**\n     * 获取一行文本的行高\n     * @returns number 文本的行高\n     */\n    function getTextLineHeight(object: { fontStyle?: 'normal' | 'italic', fontWeight?: 'normal' | 'bold', fontSize?: 16, fontFamily: string, text: string, success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): number;\n    /**\n     * 加载自定义字体文件\n     * @returns string 如果加载字体成功，则返回字体 family 值，否则返回 null。\n     */\n    function loadFont(path: string): string;\n\n\n    interface Image {\n        /**\n         * 图片的 URL\n         */\n        src: string;\n        /**\n        * 图片的真实宽度\n        */\n        width: number;\n        /**\n        * 图片的真实高度\n        */\n        height: number;\n        /**\n         * 图片的加载完成\n         */\n        onload: (res?: any) => void;\n        /**\n         * 图片加载发生错误后触发的回调函数\n         */\n        onerror: (res?: any) => void;\n    }\n\n    /**\n     * 创建一个图片对象\n     */\n    function createImage(): Image;\n\n    /**\n     * banner 广告组件。banner 广告组件是一个原生组件，层级比上屏 Canvas 高，会覆盖在上屏 Canvas 上。banner 广告组件默认是隐藏的，需要调用 BannerAd.show() 将其显示。banner 广告会根据开发者设置的宽度进行等比缩放，缩放后的尺寸将通过 BannerAd.onResize() 事件中提供。\n     */\n    interface BannerAd {\n        /**\n         * banner 广告组件的样式。style 上的属性的值仅为开发者设置的值，banner 广告会根据开发者设置的宽度进行等比缩放，缩放后的真实尺寸需要通过 BannerAd.onResize() 事件获得。\n         */\n        style: {\n            /** banner 广告组件的左上角横坐标*/\n            left: number,\n            /** banner 广告组件的左上角纵坐标*/\n            top: number,\n            /** banner 广告组件的宽度。最小 300，最大至 屏幕宽度（屏幕宽度可以通过 wx.getSystemInfoSync() 获取）。*/\n            width: number,\n            /** banner 广告组件的高度*/\n            height: number,\n            /** banner 广告组件经过缩放后真实的宽度*/\n            realWidth: number,\n            /** banner 广告组件经过缩放后真实的高度*/\n            realHeight: number\n        };\n\n        /** 显示 banner 广告。*/\n        show(): Promise<any>;\n        /** 隐藏 banner 广告*/\n        hide(): void;\n        /** 销毁 banner 广告*/\n        destroy(): void;\n        /** 监听 banner 广告尺寸变化事件*/\n        onResize(callback: (res: { width: number, height: number }) => void): void;\n        /** 取消监听 banner 广告尺寸变化事件*/\n        offResize(callback: () => void): void;\n        /** 监听 banner 广告加载事件*/\n        onLoad(callback: () => void): void;\n        /** 取消监听 banner 广告加载事件*/\n        offLoad(callback: () => void): void;\n        /** 监听 banner 广告错误事件*/\n        onError(callback: (res: { errMsg: string, errCode: 1000 | 1001 | 1002 | 1003 | 1004 | 1005 | 1006 | 1007 | 1008 }) => void): void;\n        /** 取消监听 banner 广告错误事件*/\n        offError(callback: () => void): void;\n    }\n\n    /**\n     * 激励视频广告组件。激励视频广告组件是一个原生组件，并且是一个全局单例。层级比上屏 Canvas 高，会覆盖在上屏 Canvas 上。激励视频 广告组件默认是隐藏的，需要调用 RewardedVideoAd.show() 将其显示。\n     */\n    interface RewardedVideoAd {\n        /** 隐藏激励视频广告*/\n        load(): Promise<any>;\n        /** 显示激励视频广告。激励视频广告将从屏幕下方推入。*/\n        show(): Promise<any>;\n        /** 销毁 banner 广告*/\n        destroy(): void;\n        /** 监听 banner 广告尺寸变化事件*/\n        onResize(callback: (res: { width: number, height: number }) => void): void;\n        /** 取消监听 banner 广告尺寸变化事件*/\n        offResize(callback: () => void): void;\n        /** 监听激励视频广告加载事件*/\n        onLoad(callback: () => void): void;\n        /** 取消监听激励视频广告加载事件*/\n        offLoad(callback: () => void): void;\n        /** 监听激励视频错误事件*/\n        onError(callback: (res: { errMsg: string, errCode: 1000 | 1001 | 1002 | 1003 | 1004 | 1005 | 1006 | 1007 | 1008 }) => void): void;\n        /** 取消监听激励视频错误事件*/\n        offError(callback: () => void): void;\n        /** 监听用户点击 关闭广告 按钮的事件*/\n        onClose(callback: (res: { isEnded: boolean }) => void);\n        /** 取消监听用户点击 关闭广告 按钮的事件*/\n        offClose(callback: () => void);\n    }\n\n    /**\n     * 创建激励视频广告组件。请通过 wx.getSystemInfoSync() 返回对象的 SDKVersion 判断基础库版本号 >= 2.0.4 后再使用该 API。同时，开发者工具上暂不支持调试该 API，请直接在真机上进行调试。\n     */\n    function createRewardedVideoAd(res: { adUnitId: string }): RewardedVideoAd;\n\n    /**\n     * 创建 banner 广告组件。请通过 wx.getSystemInfoSync() 返回对象的 SDKVersion 判断基础库版本号 >= 2.0.4 后再使用该 API。同时，开发者工具上暂不支持调试该 API，请直接在真机上进行调试。\n     */\n    function createBannerAd(res: {\n        adUnitId: string, style: {\n            left: number,\n            top: number,\n            width: number,\n            height: number\n        }\n    }): BannerAd;\n\n    /**\n     * 显示操作菜单\n     */\n    function showActionSheet(object: { itemList: string[], itemColor?: string, success?: (res?: { tapIndex: number }) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /** 隐藏 loading 提示框*/\n    function hideLoading(object: { success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n    /** 显示 loading 提示框。需主动调用 wx.hideLoading 才能关闭提示框*/\n    function showLoading(object: { title: string, mask?: boolean, success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /** 隐藏消息提示框*/\n    function hideToast(object: { success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /** 显示消息提示框*/\n    function showToast(object: { title: string, icon?: 'success' | 'loading' | 'none', image?: string, duration?: 1500, mask?: boolean, success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /**\n     * 显示模态对话框\n     */\n    function showModal(object: {\n        title: string,\n        content: string,\n        showCancel?: true,\n        cancelText?: '取消',\n        cancelColor?: '#000000',\n        confirmText?: '确定',\n        confirmColor?: '#3cc51f',\n        success?: (res?: any) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): void;\n\n    /**\n     * 基础库 2.1.0 开始支持，低版本需做兼容处理。更新键盘输入框内容。只有当键盘处于拉起状态时才会产生效果\n     */\n    function updateKeyboard(res: {\n        value: string,\n        success?: (res?: any) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): void;\n\n    /**\n     * 隐藏键盘\n     */\n    function hideKeyboard(object: { success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /**\n    * 显示键盘\n    */\n    function showKeyboard(object: { defaultValue: string, maxLength: number, multiple: boolean, confirmHold: boolean, confirmType: 'done' | 'next' | 'search' | 'go' | 'send', success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n    /**\n     * 监听键盘输入事件\n     */\n    function onKeyboardInput(callback: (res: { value: string }) => void): void;\n    /**\n     * 取消监听键盘输入事件\n     */\n    function offKeyboardInput(callback: () => void): void;\n    /**\n     * 监听用户点击键盘 Confirm 按钮时的事件\n     */\n    function onKeyboardConfirm(callback: (res: { value: string }) => void): void;\n    /**\n     * 取消监听用户点击键盘 Confirm 按钮时的事件\n     */\n    function offKeyboardConfirm(callback: () => void): void;\n    /**\n     * 监听监听键盘收起的事件\n     */\n    function onKeyboardComplete(callback: (res: { value: string }) => void): void;\n    /**\n     * 取消监听监听键盘收起的事件\n     */\n    function offKeyboardComplete(callback: () => void): void;\n\n    /** 基础库 2.1.0 开始支持，低版本需做兼容处理。获取菜单按钮（右上角胶囊按钮）的布局位置信息。坐标信息以屏幕左上角为原点。*/\n    function getMenuButtonBoundingClientRect(): {\n        width: number,\n        height: number,\n        top: number,\n        right: number,\n        bottom: number,\n        left: number\n    };\n\n    /** 动态设置通过右上角按钮拉起的菜单的样式。*/\n    function setMenuStyle(res: { style: 'light' | 'dark', success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /** 当在配置中设置 showStatusBarStyle 时，屏幕顶部会显示状态栏。此接口可以修改状态栏的样式。*/\n    function setStatusBarStyle(res: { style: 'white' | 'black', success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /**\n     * 监听窗口尺寸变化事件\n     */\n    function onWindowResize(callback: (res: { windowWidth: number, windowHeight: number }) => void): void;\n    /**\n     * 取消监听窗口尺寸变化事件\n     */\n    function offWindowResize(callback: () => void): void;\n\n    interface RequestTask {\n        abort(): void;\n        /** 监听 HTTP Response Header 事件。会比请求完成事件更早*/\n        onHeadersReceived(callback: (res: { header: Object }) => void): void;\n        /** 取消监听 HTTP Response Header 事件*/\n        offHeadersReceived(callback: () => void): void;\n    }\n\n    /**\n     * 发起网络请求。\n     */\n    function request(object: {\n        url: string,\n        data?: string | {} | ArrayBuffer,\n        header?: {},\n        method?: 'OPTIONS' | 'GET' | 'HEAD' | 'POST' | 'PUT' | 'DELETE' | 'TRACE' | 'CONNECT',\n        dataType?: 'json' | string,\n        responseType: 'text' | 'arraybuffer',\n        success?: (res?: {\n            data: string | {} | ArrayBuffer,\n            statusCode: number,\n            header: {}\n        }) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): RequestTask;\n\n\n    interface DownloadTask {\n        abort(): void;\n\n        /** 监听下载进度变化事件*/\n        onProgressUpdate(callback: (res: {\n            progress: number,\n            totalBytesWritten: number,\n            totalBytesExpectedToWrite: number\n        }) => void): void;\n\n        /** 取消监听下载进度变化事件*/\n        offProgressUpdate(callback: () => void): void;\n        /** 监听 HTTP Response Header 事件。会比请求完成事件更早*/\n        onHeadersReceived(callback: (res: { header: Object }) => void): void;\n        /** 取消监听 HTTP Response Header 事件*/\n        offHeadersReceived(callback: () => void): void;\n    }\n\n    /**\n     * 下载文件资源到本地，客户端直接发起一个 HTTP GET 请求，返回文件的本地文件路径。\n     */\n    function downloadFile(object: {\n        url: string,\n        header?: Object,\n        filePath?: string,\n        success?: (res?: {\n            tempFilePath: string,\n            statusCode: number\n        }) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): DownloadTask;\n\n    interface UploadTask {\n        /** 中断上传任务*/\n        abort(): void;\n        /** 监听上传进度变化事件*/\n        onProgressUpdate(callback: (res: {\n            progress: number,\n            totalBytesSent: number,\n            totalBytesExpectedToSend: number\n        }) => void): void;\n        /** 取消监听上传进度变化事件*/\n        offProgressUpdate(callback: () => void): void;\n        /** 监听 HTTP Response Header 事件。会比请求完成事件更早*/\n        onHeadersReceived(callback: (res: { header: Object }) => void): void;\n        /** 取消监听 HTTP Response Header 事件*/\n        offHeadersReceived(callback: () => void): void;\n    }\n\n    /**\n     * 将本地资源上传到开发者服务器，客户端发起一个 HTTPS POST 请求，其中 content-type 为 multipart/form-data 。\n     */\n    function uploadFile(object: {\n        url: string,\n        filePath: string,\n        name: string,\n        header?: Object,\n        formData?: Object,\n        success?: (res?: {\n            data: string,\n            statusCode: number\n        }) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): UploadTask;\n\n    interface SocketTask {\n        /**\n         * 关闭 WebSocket 连接\n         */\n        close(object: { code?: 1000, reason?: string, success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n        /**\n         * 监听WebSocket 连接打开事件\n         */\n        onOpen(callback: (res: { header: Object }) => void): void;\n        /**\n         * 监听WebSocket 连接关闭事件\n         */\n        onClose(callback: () => void): void;\n        /**\n         * 监听WebSocket 错误事件\n         */\n        onError(callback: (res: { errMsg: string }) => void): void;\n        /**\n         * 监听WebSocket 接受到服务器的消息事件\n         */\n        onMessage(callback: (res: { data: string | ArrayBuffer }) => void): void;\n        /**\n         * 通过 WebSocket 连接发送数据\n         */\n        send(object: { data: string | ArrayBuffer, success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n    }\n\n    /**\n     * 监听WebSocket 错误事件\n     */\n    function onSocketError(callback: (err?: any) => void): void;\n\n    /**\n     * 创建一个 WebSocket 连接。\n     */\n    function connectSocket(object: { url: string, header?: {}, protocols: Array<string>, success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): SocketTask;\n    /**\n     * 关闭 WeSocket 连接\n     */\n    function closeSocket(object: { code?: 1000, reason?: string, success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n    /**\n     * 监听WebSocket 连接打开事件\n     */\n    function onSocketOpen(callback: (res: { header: {} }) => void): void;\n    /**\n     * 监听WebSocket 连接关闭事件\n     */\n    function onSocketClose(callback: () => void): void;\n    /**\n     * 监听WebSocket 接受到服务器的消息事件\n     */\n    function onSocketMessage(callback: (res: { data: string | ArrayBuffer }) => void): void;\n    /**\n     * 通过 WebSocket 连接发送数据，需要先 wx.connectSocket，并在 wx.onSocketOpen 回调之后才能发送。\n     */\n    function sendSocketMessage(object: { data: string | ArrayBuffer, success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /** \n     * 更新转发属性\n     * \n     */\n    function updateShareMenu(object: { withShareTicket?: boolean, isUpdatableMessage?: boolean, activityId?: string, templateInfo?: { parameterList: Array<{ name: string, value: string }> }, success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /**\n     * 显示当前页面的转发按钮\n     */\n    function showShareMenu(object: { withShareTicket?: boolean, success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /**\n     * 隐藏转发按钮\n     * \n     */\n    function hideShareMenu(object: { success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /**\n     * 获取转发详细信息\n     *  \n     */\n    function getShareInfo(object: {\n        shareTicket: string,\n        timeout: number,\n        success?: (res: {\n            errMsg: string,\n            encryptedData: string,\n            iv: string\n        }) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): void;\n\n    /**\n     * 主动拉起转发，进入选择通讯录界面。\n     */\n    function shareAppMessage(object: { title?: string, imageUrl?: string, query?: string, imageUrlId?: string }): void;\n\n    /**\n     * 取消监听用户点击右上角菜单的“转发”按钮时触发的事件\n     */\n    function offShareAppMessage(callback: () => void): void;\n\n    /**\n     * 监听用户点击右上角菜单的“转发”按钮时触发的事件\n     */\n    function onShareAppMessage(callback: (res: {\n        title: string,\n        imageUrl: string,\n        query: string\n    }) => void): void;\n\n\n    /**\n    * 发起米大师支付\n    */\n    function requestMidasPayment(object: {\n        mode: string,\n        env?: 0 | 1,\n        offerId: string,\n        currencyType: string,\n        platform?: string,\n        buyQuantity?: number,\n        zoneId?: string,\n        success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void\n    }): void;\n\n    /**\n     * wx.getStorageInfo 的同步版本\n     */\n    function getStorageInfoSync(): { keys: Array<string>, currentSize: number, limitSize: number };\n\n    /**\n     * 异步获取当前storage的相关信息\n     */\n    function getStorageInfo(object: { success?: (res: { keys: Array<string>, currentSize: number, limitSize: number }) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /**\n     * wx.clearStorage 的同步版本\n     */\n    function clearStorageSync(): void;\n\n    /**\n     * 清理本地数据缓存\n     */\n    function clearStorage(object: { success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /**\n     * wx.removeStorage 的同步版本\n     */\n    function removeStorageSync(key: string): void;\n\n    /**\n     * 从本地缓存中移除指定 key\n     */\n    function removeStorage(object: { key: string, success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /**\n     * wx.setStorage 的同步版本\n     */\n    function setStorageSync(key: string, data: any): void;\n\n    /**\n     * 将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容。\n     */\n    function setStorage(object: { key: string, data: any, success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /**\n     * wx.getStorage 的同步版本\n     */\n    function getStorageSync(key: string): any;\n\n    /**\n     * 从本地缓存中异步获取指定 key 的内容\n     */\n    function getStorage(object: { key: string, success?: (res: { data: any }) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /**\n     * 设置 InnerAudioContext 的播放选项。设置之后对当前小程序全局生效。\n     */\n    function setInnerAudioOption(mixWithOther: true, obeyMuteSwitch: true, success?: (res: { data: any }) => void, fail?: (res?: any) => void, complete?: (res?: any) => void): void;\n\n    /**\n     * 获取当前支持的音频输入源\n     */\n    function getAvailableAudioSources(success?: (res: { audioSources: Array<'auto' | 'buildInMic' | 'headsetMic' | 'mic' | 'camcorder' | 'voice_communication' | 'voice_recognition'> }) => void, fail?: (res?: any) => void, complete?: (res?: any) => void): void;\n\n    /**\n     * InnerAudioContext 实例，可通过 wx.createInnerAudioContext 接口获取实例。\n     */\n    interface InnerAudioContext {\n        /** 音频资源的地址，用于直接播放。2.2.3 开始支持云文件ID*/\n        src: string;\n        /** 开始播放的位置（单位：s），默认为 0*/\n        startTime: number;\n        /** 是否自动开始播放，默认为 false*/\n        autoplay: boolean;\n        /** 是否循环播放，默认为 false*/\n        loop: boolean;\n        /** 是否遵循系统静音开关，默认为 true。当此参数为 false 时，即使用户打开了静音开关，也能继续发出声音*/\n        obeyMuteSwitch: boolean;\n        /** 基础库 1.9.90 开始支持，低版本需做兼容处理。音量。范围 0~1。默认为 1*/\n        volume: number;\n        /** 当前音频的长度（单位 s）。只有在当前有合法的 src 时返回（只读）*/\n        duration: number;\n        /** 当前音频的播放位置（单位 s）。只有在当前有合法的 src 时返回，时间保留小数点后 6 位（只读）*/\n        currentTime: number;\n        /** 当前是是否暂停或停止状态（只读）*/\n        paused: boolean;\n        /** 音频缓冲的时间点，仅保证当前播放时间点到此时间点内容已缓冲（只读）*/\n        buffered: number;\n        /**\n         * 销毁当前实例\n         */\n        destroy(): void;\n        /**\n         * 取消监听音频进入可以播放状态的事件\n         */\n        offCanplay(callback: () => void): void;\n        /**\n         * 监听音频暂停事件\n         */\n        onPause(callback: () => void): void;\n        /**\n         * 监听音频停止事件\n         */\n        onStop(callback: () => void): void;\n        /**\n         * 取消监听音频停止事件\n         */\n        offStop(callback: () => void): void;\n        /**\n         * 监听音频自然播放至结束的事件\n         */\n        onEnded(callback: () => void): void;\n        /**\n         * 取消监听音频自然播放至结束的事件\n         */\n        offEnded(callback: () => void): void;\n        /**\n         * 监听音频播放进度更新事件\n         */\n        onTimeUpdate(callback: () => void): void;\n        /**\n         * 监听音频播放事件\n         */\n        onPlay(callback: () => void): void;\n        /**\n         * 监听音频播放错误事件\n         */\n        onError(callback: (res: { errCode: 10001 | 10002 | 10003 | 10004 | -1 }) => void): void;\n        /**\n         * 取消监听音频暂停事件\n         */\n        offPause(callback: () => void): void;\n        /**\n         * 监听音频加载中事件，当音频因为数据不足，需要停下来加载时会触发\n         */\n        onWaiting(callback: () => void): void;\n        /**\n         * 取消监听音频加载中事件，当音频因为数据不足，需要停下来加载时会触发\n         */\n        offWaiting(callback: () => void): void;\n        /**\n         * 监听音频进行跳转操作的事件\n         */\n        onSeeking(callback: () => void): void;\n        /**\n         * 取消监听音频进行跳转操作的事件\n         */\n        offSeeking(callback: () => void): void;\n        /**\n         * 监听音频完成跳转操作的事件\n         */\n        onSeeked(callback: () => void): void;\n        /**\n         * 取消监听音频完成跳转操作的事件\n         */\n        offSeeked(callback: () => void): void;\n        /**\n         * 取消监听音频播放事件\n         */\n        offPlay(callback: () => void): void;\n        /**\n         * 取消监听音频播放进度更新事件\n         */\n        offTimeUpdate(callback: () => void): void;\n        /**\n         * 监听音频进入可以播放状态的事件\n         */\n        onCanplay(callback: () => void): void;\n        /**\n         * 取消监听音频播放错误事件\n         */\n        offError(callback: () => void): void;\n        /**\n         * 停止。停止后的音频再播放会从头开始播放。\n         */\n        pause(): void;\n        /**\n         * 播放\n         */\n        play(): void;\n        /**\n         * 跳转到指定位置，单位 s\n         */\n        seek(position: number): void;\n    }\n    /**\n     * 创建内部 audio 上下文 InnerAudioContext 对象。\n     */\n    function createInnerAudioContext(): InnerAudioContext;\n\n    /**\n     * 从本地相册选择图片或使用相机拍照。\n     */\n    function chooseImage(object: {\n        count: 9,\n        sizeType?: ['original', 'compressed'],\n        sourceType?: ['album', 'camera'],\n        success?: (res: {\n            tempFilePaths: Array<string>,\n            tempFiles: Array<{ path: string, size: number }>\n        }) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): void;\n\n    /**\n     * 预览图片\n     */\n    function previewImage(object: { urls: string[], current?: string, success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n    /**\n     * 保存图片到系统相册。\n     */\n    function saveImageToPhotosAlbum(object: { filePath: string, success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /**全局唯一的录音管理器 */\n    interface RecorderManager {\n        /**\n         * 监听录音暂停事件\n         */\n        onPause(callback: () => void): void;\n        /**\n         * 监听录音结束事件\n         */\n        onStop(callback: (res: { tempFilePath: string }) => void): void;\n        /**\n         * 监听已录制完指定帧大小的文件事件。如果设置了 frameSize，则会回调此事件。\n         */\n        onFrameRecorded(callback: (res: { frameBuffer: ArrayBuffer, isLastFrame: boolean }) => void): void;\n        /**\n         * 监听录音错误事件\n         */\n        onError(callback: (res: { errMsg: string }) => void): void;\n        /**\n         * 监听录音开始事件\n         */\n        onStart(callback: () => void): void;\n        /**\n         * 监听录音因为受到系统占用而被中断开始事件。以下场景会触发此事件：微信语音聊天、微信视频聊天。此事件触发后，录音会被暂停。pause 事件在此事件后触发\n         */\n        onInterruptionBegin(callback: () => void): void;\n        /**\n         * 监听录音中断结束事件。在收到 interruptionBegin 事件之后，小程序内所有录音会暂停，收到此事件之后才可再次录音成功。\n         */\n        onInterruptionEnd(callback: () => void): void;\n        /**\n         * 监听录音继续事件\n         */\n        onResume(callback: () => void): void;\n        /**\n         * 暂停录音\n         */\n        pause(): void;\n        /**\n         * 继续录音\n         */\n        resume(): void;\n        /**\n         * 停止录音\n         */\n        stop(): void;\n        /**\n         * 开始录音\n         */\n        start(object: { duration?: number, sampleRate?: number, numberOfChannels?: number, encodeBitRate?: number, format?: string, frameSize?: number, audioSource?: string }): void;\n    }\n\n    /**\n     * 获取全局唯一的录音管理器 RecorderManager\n     */\n    function getRecorderManager(): RecorderManager;\n\n    /** 视频对象*/\n    interface Video {\n        /** 视频的左上角横坐标*/\n        x: number;\n        /** 视频的左上角纵坐标*/\n        y: number;\n        /** 视频的宽度*/\n        width: number;\n        /** 视频的高度*/\n        height: number;\n        /** 视频的资源地址*/\n        src: number;\n        /** 视频的封面*/\n        poster: number;\n        /** 视频的初始播放位置，单位为 s 秒*/\n        initialTime: number;\n        /** 视频的播放速率，有效值有 0.5、0.8、1.0、1.25、1.5*/\n        playbackRate: number;\n        /** 视频是否为直播*/\n        live: number;\n        /** 视频的缩放模式*/\n        objectFit: number;\n        /** 视频是否显示控件*/\n        controls: number;\n        /** 视频是否自动播放*/\n        autoplay: number;\n        /** 视频是否是否循环播放*/\n        loop: number;\n        /** 视频是否禁音播放*/\n        muted: number;\n        /** 是否启用手势控制播放进度*/\n        enableProgressGesture: boolean;\n        /** 是否显示视频中央的播放按钮*/\n        showCenterPlayBtn: boolean;\n\n        /** 视频开始缓冲时触发的回调函数*/\n        onwaiting: () => void;\n\n        /** 视频开始播放时触发的回调函数*/\n        onplay: () => void;\n\n        /** 视频暂停时触发的回调函数*/\n        onpause: () => void;\n\n        /** 视频播放到末尾时触发的回调函数*/\n        onended: () => void;\n\n        /** 每当视频播放进度更新时触发的回调函数*/\n        ontimeupdate: () => void;\n\n        /** 视频发生错误时触发的回调函数*/\n        onerror: () => void;\n\n        /**\n         * 视频退出全屏\n         */\n        exitFullScreen(): Promise<Object>;\n        /**\n         * 取消监听视频暂停事件\n         */\n        offPause(callback: () => void): void;\n        /**\n         * 监听视频播放到末尾事件\n         */\n        onEnded(callback: () => void): void;\n        /**\n         * 取消监听视频播放到末尾事件\n         */\n        offEnded(callback: () => void): void;\n        /**\n         * 监听视频播放进度更新事件\n         */\n        onTimeUpdate(callback: (res: { position: number, duration: number }) => void): void;\n        /**\n         * 取消监听视频播放进度更新事件\n         */\n        offTimeUpdate(callback: () => void): void;\n        /**\n         * 监听视频错误事件\n         */\n        onError(callback: (res: { errMsg: string }) => void): void;\n        /**\n         * 取消监听视频错误事件\n         */\n        offError(callback: () => void): void;\n        /**\n         * 监听视频播放事件\n         */\n        onPlay(callback: () => void): void;\n        /**\n         * 监听视频暂停事件\n         */\n        onPause(callback: () => void): void;\n        /**\n         * 取消监听视频缓冲事件\n         */\n        offWaiting(callback: () => void): void;\n        /**\n         * 监听视频缓冲事件\n         */\n        onWaiting(callback: () => void): void;\n        /**\n         * 取消监听视频播放事件\n         */\n        offPlay(callback: () => void): void;\n        /**\n         * 暂停视频\n         */\n        pause(): Promise<any>;\n        /**\n         * 播放视频\n         */\n        play(): Promise<any>;\n        /**\n         * 视频全屏\n         */\n        requestFullScreen(): Promise<any>;\n        /**\n         * 视频跳转\n         */\n        seek(time: number): Promise<any>;\n        /**\n         * 停止视频\n         */\n        stop(): Promise<Object>;\n    }\n\n    /**\n     * 创建视频\n     */\n    function createVideo(object: {\n        x?: number, y?: number,\n        width?: number, height?: number,\n        src: number, poster: number,\n        initialTime?: number, playbackRate?: number,\n        live?: number, objectFit?: number,\n        controls?: number, autoplay?: number,\n        loop?: number, muted?: number,\n        enableProgressGesture: boolean,\n        showCenterPlayBtn: boolean\n    }): Video;\n\n    /**\n     * 获取当前的地理位置、速度。当用户离开小程序后，此接口无法调用；当用户点击“显示在聊天顶部”时，此接口可继续调用。\n     */\n    function getLocation(object: {\n        type?: string, altitude: string,\n        success?: (res: {\n            latitude: number,\n            longitude: number,\n            speed: number,\n            accuracy: number,\n            altitude: number,\n            verticalAccuracy: number,\n            horizontalAccuracy: number\n        }) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): void;\n\n    /** 文件管理器*/\n    interface FileSystemManager {\n        /**\n         * 判断文件/目录是否存在\n         */\n        access(object: {\n            path: string,\n            success?: (res?: any) => void,\n            fail?: (res?: { errMsg: string }) => void,\n            complete?: (res?: any) => void\n        }): void;\n        /**\n         * FileSystemManager.access 的同步版本\n         */\n        accessSync(path: string): void;\n\n        /** 在文件结尾追加内容*/\n        appendFile(filePath: string,\n            data: string | ArrayBuffer,\n            encoding: string,\n            success?: (res?: any) => void,\n            fail?: (res: { errMsg: string }) => void,\n            complete?: (res?: any) => void): void;\n\n        /** appendFile同步版本*/\n        appendFileSync(filePath: string, data: string | ArrayBuffer, encoding: string): void;\n\n        /**\n        * 保存临时文件到本地。此接口会移动临时文件，因此调用成功后，tempFilePath 将不可用。\n        */\n        saveFile(object: { tempFilePath: string, filePath?: string, success?: (res: { savedFilePath: number }) => void, fail?: (res: { errMsg: string }) => void, complete?: (res?: any) => void }): void;\n\n        /**\n        * FileSystemManager.saveFile 的同步版本\n        */\n        saveFileSync(tempFilePath: string, filePath: string): number;\n\n        /**\n         * 获取该小程序下已保存的本地缓存文件列表\n         */\n        getSavedFileList(object: { success?: (res: { fileList: Array<{ filePath: string, size: number, createTime: number }> }) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n        /**\n         * 删除该小程序下已保存的本地缓存文件\n         */\n        removeSavedFile(object: { filePath: string, success?: (res?: any) => void, fail?: (res: { errMsg: string }) => void, complete?: (res?: any) => void }): void;\n\n        /**\n         * 复制文件\n         */\n        copyFile(object: { srcPath: string, destPath: string, success?: (res?: any) => void, fail?: (res: { errMsg: string }) => void, complete?: (res?: any) => void }): void;\n\n        /**\n         * FileSystemManager.copyFile 的同步版本\n         */\n        copyFileSync(srcPath: string, destPath: string): void;\n\n        /**\n         * 获取该小程序下的 本地临时文件 或 本地缓存文件 信息\n         */\n        getFileInfo(object: { filePath: string, success?: (res: { size: number }) => void, fail?: (res: { errMsg: string }) => void, complete?: (res?: any) => void }): void;\n\n        /**\n         * 创建目录\n         */\n        mkdir(object: { dirPath: string, recursive?: boolean, success?: (res?: any) => void, fail?: (res: { errMsg: string }) => void, complete?: (res?: any) => void }): void;\n\n        /**\n         * FileSystemManager.mkdir 的同步版本\n         */\n        mkdirSync(dirPath: string): void;\n\n        /**\n         * 读取本地文件内容\n         */\n        readFile(object: { filePath: string, encoding?: string, success?: (res: { data: string | ArrayBuffer }) => void, fail?: (res: { errMsg: string }) => void, complete?: (res?: any) => void }): void;\n\n        /**\n         * FileSystemManager.readFile 的同步版本\n         */\n        readFileSync(filePath: string, encoding: string): string | ArrayBuffer;\n\n        /**\n         * 读取目录内文件列表\n         */\n        readdir(object: { dirPath: string, success?: (res: { files: Array<string> }) => void, fail?: (res: { errMsg: string }) => void, complete?: (res?: any) => void }): void;\n        /**\n         * FileSystemManager.readdir 的同步版本\n         */\n        readdirSync(dirPath: string): string[];\n\n        /**\n         * 重命名文件，可以把文件从 oldPath 移动到 newPath\n         */\n        rename(object: { oldPath: string, newPath: string, success?: (res?: any) => void, fail?: (res: { errMsg: string }) => void, complete?: (res?: any) => void }): void;\n\n        /**\n        * FileSystemManager.rename 的同步版本\n        */\n        renameSync(oldPath: string, newPath: string): void;\n\n        /**\n         * 删除目录\n         */\n        rmdir(object: { dirPath: string, recursive: boolean, success?: (res?: any) => void, fail?: (res: { errMsg: string }) => void, complete?: (res?: any) => void }): void;\n\n        /**\n         * FileSystemManager.rmdir 的同步版本\n         */\n        rmdirSync(dirPath: string, recursive: boolean): void;\n\n        /**\n         * 获取文件 Stats 对象\n         */\n        stat(object: { path: string, recursive?: boolean, success?: (res: { stats: Stats | Object }) => void, fail?: (res: { errMsg: string }) => void, complete?: (res?: any) => void }): Stats;\n\n        /**\n         * FileSystemManager.stat 的同步版本\n         */\n        statSync(path: string, recursive: boolean): Stats;\n\n        /**\n         * 删除文件\n         */\n        unlink(object: { filePath: string, success?: (res?: any) => void, fail?: (res: { errMsg: string }) => void, complete?: (res?: any) => void }): void;\n\n        /**\n         * 解压文件\n         */\n        unzip(object: { zipFilePath: string, targetPath: string, success?: (res?: any) => void, fail?: (res: { errMsg: string }) => void, complete?: (res?: any) => void }): void;\n\n        /**\n         * FileSystemManager.unlink 的同步版本\n         */\n        unlinkSync(filePath: string): void;\n\n        /**\n         * 写文件\n         */\n        writeFile(object: { filePath: string, data: string | ArrayBuffer, encoding: string, success?: (res?: any) => void, fail?: (res: { errMsg: string }) => void, complete?: (res?: any) => void }): void;\n\n        /**\n         * FileSystemManager.writeFile 的同步版本\n         */\n        writeFileSync(filePath: string, data: string | ArrayBuffer, encoding: string): void;\n    }\n\n    /** 描述文件状态的对象*/\n    interface Stats {\n        /**\n         * 文件的类型和存取的权限，对应 POSIX stat.st_mode\n         */\n        mode: string;\n        /**\n         * 文件大小，单位：B，对应 POSIX stat.st_size\n         */\n        size: number;\n        /**\n         * 文件最近一次被存取或被执行的时间，UNIX 时间戳，对应 POSIX stat.st_atime\n         */\n        lastAccessedTime: number;\n        /**\n        * 文件最后一次被修改的时间，UNIX 时间戳，对应 POSIX stat.st_mtime\n        */\n        lastModifiedTime: number;\n        /**\n         * 判断当前文件是否一个目录\n         */\n        isDirectory(): boolean;\n        /**\n         * 判断当前文件是否一个普通文件\n         */\n        isFile(): boolean;\n    }\n\n    /**\n     * 获取全局唯一的文件管理器\n     */\n    function getFileSystemManager(): FileSystemManager;\n\n    /** 打开另一个小程序*/\n    function navigateToMiniProgram(object: {\n        appId: string,\n        path?: string,\n        extraData?: {},\n        envVersion?: string,\n        success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void\n    }): void;\n\n    /**\n     * 用户信息\n     */\n    interface UserInfo {\n        /** 用户昵称*/\n        nickName: string;\n        /** 用户头像图片的 URL。URL 最后一个数值代表正方形头像大小（有 0、46、64、96、132 数值可选，0 代表 640x640 的正方形头像，46 表示 46x46 的正方形头像，剩余数值以此类推。默认132），用户没有头像时该项为空。若用户更换头像，原有头像 URL 将失效。*/\n        avatarUrl: string;\n        /** 用户性别*/\n        gender: 0 | 1 | 2;\n        /** 用户所在国家*/\n        country: string;\n        /** 用户所在省份*/\n        province: string;\n        /** 用户所在城市*/\n        city: string;\n        /** 显示 country，province，city 所用的语言*/\n        language: 'en' | 'zh_CN' | 'zh_TW'\n    }\n\n    /**\n     * 调用前需要 用户授权 scope.userInfo。\n     * 获取用户信息。\n     */\n    function getUserInfo(object: {\n        withCredentials?: boolean, lang?: string, success?: (res: {\n            ƒ\n            userInfo: UserInfo,\n            rawData: string,\n            signature: string,\n            encryptedData: string,\n            iv: string\n        }) => void, fail?: (res?: any) => void, complete?: (res?: any) => void\n    }): void;\n\n    /** 用户信息按钮*/\n    interface UserInfoButton {\n        /** 按钮的类型*/\n        type: 'text' | 'image';\n        /** 按钮上的文本，仅当 type 为 text 时有效*/\n        text: string;\n        /** 按钮的背景图片，仅当 type 为 image 时有效*/\n        image: string;\n        /** 按钮的样式*/\n        style: {\n            left: number,\n            top: number,\n            width: number,\n            height: number,\n            backgroundColor: string,\n            borderColor: string,\n            borderWidth: number,\n            borderRadius: number,\n            textAlign: string,\n            fontSize: number,\n            lineHeight: number\n        },\n        /** 显示用户信息按钮*/\n        show();\n\n        /** 隐藏用户信息按钮。*/\n        hide();\n\n        /** 销毁用户信息按钮*/\n        destroy();\n\n        /** 监听用户信息按钮的点击事件*/\n        onTap(callback: (res: {\n            userInfo: UserInfo,\n            rawData: string,\n            signature: string,\n            encryptedData: string,\n            iv: string\n        }) => void);\n\n        /** 取消监听用户信息按钮的点击事件*/\n        offTap(callback: () => void);\n    }\n\n    /** 创建用户信息按钮*/\n    function createUserInfoButton(object: {\n        type: \"text\" | \"image\",\n        text?: string,\n        image?: string,\n        style: {\n            left: number,\n            top: number,\n            width: number,\n            height: number,\n            backgroundColor: string,\n            borderColor: string,\n            borderWidth: number,\n            borderRadius: number,\n            textAlign: \"left\" | \"center\" | \"right\",\n            fontSize: number,\n            lineHeight: number\n        },\n        withCredentials: boolean,\n        lang?: \"en\" | \"zh_CN\" | \"zh_TW\"\n    }): UserInfoButton;\n\n    /**\n     * 通过 wx.login 接口获得的用户登录态拥有一定的时效性。用户越久未使用小程序，用户登录态越有可能失效。反之如果用户一直在使用小程序，则用户登录态一直保持有效。具体时效逻辑由微信维护，对开发者透明。开发者只需要调用 wx.checkSession 接口检测当前用户登录态是否有效。登录态过期后开发者可以再调用 wx.login 获取新的用户登录态。\n     */\n    function checkSession(object: { success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /** 提前向用户发起授权请求。调用后会立刻弹窗询问用户是否同意授权小程序使用某项功能或获取用户的某些数据，但不会实际调用对应接口。如果用户之前已经同意授权，则不会出现弹窗，直接返回成功。更多用法详见 用户授权。*/\n    function authorize(object: { scope: string, success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /**\n     * 调用接口获取登录凭证（code）进而换取用户登录态信息，包括用户的唯一标识（openid） 及本次登录的 会话密钥（session_key）等。用户数据的加解密通讯需要依赖会话密钥完成。\n     */\n    function login(object: { timeout?: number, success?: (res: { code: string }) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /**\n     * 只有开放数据域能调用，获取主域和开放数据域共享的 sharedCanvas\n     */\n    function getSharedCanvas(): Canvas;\n\n    /** 托管的 KV 数据*/\n    interface KVData {\n        /** 数据的 key*/\n        key: string;\n        /** 数据的 value*/\n        value: string;\n    }\n\n    /** 托管数据*/\n    interface UserGameData {\n        /** 用户的微信头像 url*/\n        avatarUrl: string;\n        /** 用户的微信昵称*/\n        nickname: string;\n        /** 用户的 openid*/\n        openid: string;\n        /** 用户的托管 KV 数据列表*/\n        KVDataList: Array<KVData>;\n    }\n\n    /**\n     * 拉取当前用户所有同玩好友的托管数据。该接口只可在开放数据域下使用\n     */\n    function getFriendCloudStorage(object: { keyList: string[], success?: (res: { data: Array<UserGameData> }) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /**\n     * 在小游戏是通过群分享卡片打开的情况下，可以通过调用该接口获取群同玩成员的游戏数据。该接口只可在开放数据域下使用。\n     */\n    function getGroupCloudStorage(object: { shareTicket: string, keyList: string[], success?: (res: { data: Array<UserGameData> }) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /**\n     * 获取当前用户托管数据当中对应 key 的数据。该接口只可在开放数据域下使用\n     */\n    function getUserCloudStorage(object: { keyList: Array<string>, success?: (res: { KVDataList: Array<KVData> }) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /**\n     * 删除用户托管数据当中对应 key 的数据。\n     */\n    function removeUserCloudStorage(object: { keyList: string[], success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /**\n     * 对用户托管数据进行写数据操作，允许同时写多组 KV 数据。\n     */\n    function setUserCloudStorage(object: { KVDataList: Array<KVData>, success?: (res?: any) => void, fail?: (res?: any) => void, complete?: (res?: any) => void }): void;\n\n    /** 在无须用户授权的情况下，批量获取用户信息。该接口只在开放数据域下可用*/\n    function getUserInfo(object: {\n        /** 要获取信息的用户的 openId 数组，如果要获取当前用户信息，则将数组中的一个元素设为 'selfOpenId'*/\n        openIdList?: Array<string>,\n        /** 显示用户信息的语言*/\n        lang?: 'en' | 'zh_CN' | 'zh_TW',\n        success?: (res: {\n            data: Array<{\n                avatarUrl: string,\n                city: string,\n                country: string,\n                gender: number,\n                language: string,\n                nickName: string,\n                openId: string,\n                province: string\n            }>\n        }) => void, fail?: (res?: any) => void, complete?: (res?: any) => void\n    }): void;\n\n    /**\n     * 监听主域发送的消息\n     */\n    function onMessage(callback: () => void): void;\n\n    /** 开放数据域对象*/\n    interface OpenDataContext {\n        /** 开放数据域和主域共享的 sharedCanvas*/\n        canvas: Canvas;\n        /**\n         * 向开放数据域发送消息\n         * @param message {} 要发送的消息，message 中及嵌套对象中 key 的 value 只能是 primitive value。即 number、string、boolean、null、undefined。\n         */\n        postMessage(message: {}): void;\n    }\n\n    /**\n     * 获取开放数据域\n     */\n    function getOpenDataContext(): OpenDataContext;\n\n    /**\n     * 根据用户当天游戏时间判断用户是否需要休息\n     */\n    function checkIsUserAdvisedToRest(object: {\n        todayPlayedTime: number,\n        success?: (res: { result: boolean }) => void,\n        fail?: (res?: any) => void, complete?: (res?: any) => void\n    }): void;\n\n    /**用户点击后打开意见反馈页面的按钮 */\n    interface FeedbackButton {\n        /** 按钮的类型*/\n        type: 'text' | 'image';\n        text: string,\n        image: string,\n        style: {\n            left: number,\n            top: number,\n            width: number,\n            height: number,\n            backgroundColor: string,\n            borderColor: string,\n            borderWidth: number,\n            borderRadius: number,\n            textAlign: 'left' | 'center' | 'right',\n            fontSize: number,\n            lineHeight: number\n        },\n\n        /** 显示意见反馈按钮*/\n        show(): void;\n\n        /** 隐藏意见反馈按钮。*/\n        hide(): void;\n\n        /** 销毁意见反馈按钮*/\n        destroy(): void;\n\n        /** 监听意见反馈按钮的点击事件*/\n        onTap(callback: () => void): void;\n\n        /** 取消监听意见反馈按钮的点击事件*/\n        offTap(callback: () => void): void;\n    }\n    /**\n     * 创建打开意见反馈页面的按钮\n     */\n    function createFeedbackButton(object: {\n        type: 'text' | 'image',\n        text?: string,\n        image?: string,\n        style: {\n            left: number,\n            top: number,\n            width: number,\n            height: number,\n            backgroundColor: string,\n            borderColor: string,\n            borderWidth: number,\n            borderRadius: number,\n            textAlign: 'left' | 'center' | 'right',\n            fontSize: number,\n            lineHeight: number\n        }\n    }): FeedbackButton;\n\n    /** 用户授权设置信息，详情参考权限*/\n    interface AuthSetting {\n        /** 是否授权用户信息，对应接口 wx.getUserInfo*/\n        userInfo: boolean;\n        /** 是否授权地理位置，对应接口 wx.getLocation*/\n        userLocation: boolean;\n        /** 是否授权微信运动步数，对应接口 wx.getWeRunData*/\n        werun: boolean;\n        /** 是否授权保存到相册 wx.saveImageToPhotosAlbum*/\n        writePhotosAlbum: boolean;\n    }\n\n    /** 调起客户端小程序设置界面，返回用户设置的操作结果。设置界面只会出现小程序已经向用户请求过的权限。*/\n    function openSetting(object: {\n        success?: (res: { authSetting: AuthSetting }) => void,\n        fail?: (res?: any) => void, complete?: (res?: any) => void\n    }): void;\n\n    /** 获取用户的当前设置。返回值中只会出现小程序已经向用户请求过的权限。*/\n    function getSetting(object: {\n        success?: (res: { authSetting: AuthSetting }) => void,\n        fail?: (res?: any) => void, complete?: (res?: any) => void\n    }): void;\n\n    /**\n     * 用户点击后打开设置页面的按钮\n     */\n    interface OpenSettingButton {\n        type: 'text' | 'image';\n        text: string,\n        image: string,\n        style: {\n            left: number,\n            top: number,\n            width: number,\n            height: number,\n            backgroundColor: string,\n            borderColor: string,\n            borderWidth: number,\n            borderRadius: number,\n            textAlign: 'left' | 'center' | 'right',\n            fontSize: number,\n            lineHeight: number\n        },\n\n        show(): void;\n\n        hide(): void;\n\n        destroy(): void;\n\n        onTap(callback: () => void): void;\n\n        offTap(callback: () => void): void;\n    }\n\n    /** 创建打开设置页面的按钮*/\n    function createOpenSettingButton(object: {\n        type: 'text' | 'image',\n        text?: string,\n        image?: string,\n        style: {\n            left: number,\n            top: number,\n            width: number,\n            height: number,\n            backgroundColor: string,\n            borderColor: string,\n            borderWidth: number,\n            borderRadius: number,\n            textAlign: 'left' | 'center' | 'right',\n            fontSize: number,\n            lineHeight: number\n        },\n        show(): void;\n\n        hide(): void;\n\n        destroy(): void;\n\n        onTap(callback: () => void): void;\n\n        offTap(callback: () => void): void;\n    }): OpenSettingButton;\n\n    /** 游戏圈按钮。游戏圈按钮被点击后会跳转到小游戏的游戏圈。更多关于游戏圈的信息见 游戏圈使用指南*/\n    interface GameClubButton {\n        type: 'text' | 'image',\n        text?: string,\n        image?: string,\n        style: {\n            left: number,\n            top: number,\n            width: number,\n            height: number,\n            backgroundColor: string,\n            borderColor: string,\n            borderWidth: number,\n            borderRadius: number,\n            textAlign: 'left' | 'center' | 'right',\n            fontSize: number,\n            lineHeight: number\n        },\n        icon: 'green' | 'white' | 'dark' | 'light'\n    }\n\n    /** 创建游戏圈按钮。游戏圈按钮被点击后会跳转到小游戏的游戏圈。更多关于游戏圈的信息见 游戏圈使用指南*/\n    function createGameClubButton(object: {\n        type: 'text' | 'image',\n        text?: string,\n        image?: string,\n        style: {\n            left: number,\n            top: number,\n            width: number,\n            height: number,\n            backgroundColor: string,\n            borderColor: string,\n            borderWidth: number,\n            borderRadius: number,\n            textAlign: 'left' | 'center' | 'right',\n            fontSize: number,\n            lineHeight: number\n        },\n        icon: 'green' | 'white' | 'dark' | 'light'\n    }): GameClubButton;\n\n    /** 进入客服会话。要求在用户发生过至少一次 touch 事件后才能调用。后台接入方式与小程序一致，详见 客服消息接入*/\n    function openCustomerServiceConversation(object: {\n        sessionFrom?: string,\n        showMessageCard?: boolean,\n        sendMessageTitle?: string,\n        sendMessagePath?: string,\n        sendMessageImg?: string,\n        success?: (res?: any) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): void;\n\n    /** 获取用户过去三十天微信运动步数。需要先调用 wx.login 接口。步数信息会在用户主动进入小程序时更新。*/\n    function getWeRunData(object: {\n        success?: (res: { encryptedData: string, iv: string }) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): void;\n\n    /** 取消监听横竖屏切换事件*/\n    function offDeviceOrientationChange(callback: () => void): void;\n\n    /** 监听横竖屏切换事件*/\n    function onDeviceOrientationChange(callback: (res: { value: 'portrait' | 'landscape' | 'landscapeReverse' }) => void): void;\n\n    /** 监听加速度数据事件。频率根据 wx.startAccelerometer() 的 interval 参数。可使用 wx.stopAccelerometer() 停止监听。*/\n    function onAccelerometerChange(callback: (res: { x: number, y: number, z: number }) => void): void;\n\n    /** 停止监听加速度数据。*/\n    function stopAccelerometer(object: {\n        success?: (res: { encryptedData: string, iv: string }) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): void;\n\n    /** 开始监听加速度数据。*/\n    function startAccelerometer(object: {\n        interval: string,\n        success?: (res: { encryptedData: string, iv: string }) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): void;\n\n    /**\n     * 获取设备电量\n     */\n    function getBatteryInfo(object: {\n        success?: (res: { level: string, isCharging: boolean }) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): void;\n\n    /**\n     * wx.getBatteryInfo 的同步版本\n     */\n    function getBatteryInfoSync(): { level: string, isCharging: boolean };\n\n    /** 获取系统剪贴板的内容*/\n    function getClipboardData(object: {\n        success?: (res: { data: string }) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): void;\n\n    /** 设置系统剪贴板的内容*/\n    function setClipboardData(object: {\n        data: string,\n        success?: (res?: any) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): void;\n\n    /**\n     * 监听罗盘数据，频率：5 次/秒，接口调用后会自动开始监听，可使用 wx.stopCompass 停止监听。\n     * accuracy 在 iOS/Android 的差异\n     * 由于平台差异，accuracy 在 iOS/Android 的值不同。\n     * iOS：accuracy 是一个 number 类型的值，表示相对于磁北极的偏差。0 表示设备指向磁北，90 表示指向东，180 表示指向南，依此类推。\n     * Android：accuracy 是一个 string 类型的枚举值。\n     */\n    function onCompassChange(callback: (res: { direction: number, accuracy: number | string }) => void): void;\n\n    /**\n     * 开始监听陀螺仪数据。\n     */\n    function startCompass(object: {\n        interval?: string,\n        success?: (res?: any) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): void;\n\n    /**\n     * 停止监听陀螺仪数据。\n     */\n    function stopCompass(object: {\n        success?: (res?: any) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): void;\n\n    /**\n     * 监听设备方向变化事件。频率根据 wx.startDeviceMotionListening() 的 interval 参数。可以使用 wx.stopDeviceMotionListening() 停止监听。\n     */\n    function onDeviceMotionChange(callback: (res: {\n        alpha: number,\n        beta: number,\n        gamma: number,\n    }) => void): void;\n\n    /** 停止监听设备方向的变化。*/\n    function stopDeviceMotionListening(\n        success?: (res?: any) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    ): void;\n\n    /** 开始监听设备方向的变化。*/\n    function startDeviceMotionListening(\n        interval: string,\n        success?: (res?: any) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    ): void;\n\n    /** 监听网络状态变化事件*/\n    function onNetworkStatusChange(callback: (res: { isConnected: boolean, networkType: string }) => void): void;\n\n    /** 获取网络类型*/\n    function getNetworkType(object: {\n        success?: (res: { networkType: string }) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): void;\n\n    /** 使手机发生较长时间的振动（400 ms)*/\n    function vibrateLong(object: {\n        success?: (res?: any) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): void;\n\n    /** 使手机发生较短时间的振动（15 ms）。仅在 iPhone 7 / 7 Plus 以上及 Android 机型生效*/\n    function vibrateShort(object: {\n        success?: (res?: any) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): void;\n\n    /** \n     * 监听内存不足告警事件。\n     * 当 iOS/Android 向小程序进程发出内存警告时，触发该事件。触发该事件不意味小程序被杀，大部分情况下仅仅是告警，开发者可在收到通知后回收一些不必要资源避免进一步加剧内存紧张。\n     */\n    function onMemoryWarning(callback: (res: { level: number }) => void): void;\n\n    /** 设置屏幕亮度*/\n    function setScreenBrightness(object: {\n        value: number,\n        success?: (res?: any) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): void;\n\n    /** 设置是否保持常亮状态。仅在当前小程序生效，离开小程序后设置失效。*/\n    function setKeepScreenOn(object: {\n        keepScreenOn: boolean,\n        success?: (res?: any) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): void;\n\n    /** 获取屏幕亮度*/\n    function getScreenBrightness(object: {\n        success?: (res: { value: number }) => void,\n        fail?: (res?: any) => void,\n        complete?: (res?: any) => void\n    }): void;\n\n    /**\n     * 对于游戏来说，每帧 16ms 是极其宝贵的，如果有一些可以异步处理的任务，可以放置于 Worker 中运行，待运行结束后，再把结果返回到主线程。Worker 运行于一个单独的全局上下文与线程中，不能直接调用主线程的方法，Worker 也不具备渲染的能力。 Worker 与主线程之间的数据传输，双方使用 Worker.postMessage() 来发送数据，Worker.onMessage() 来接收数据，传输的数据并不是直接共享，而是被复制的。\n     * @see https://developers.weixin.qq.com/minigame/dev/tutorial/usability/worker.html\n     */\n    interface Worker {\n        /**\n         * 监听接收主线程/Worker 线程向当前线程发送的消息\n         */\n        onMessage(callback: (res: { message: Object }) => void): void;\n        /**\n         * 向主线程/Worker 线程发送的消息。\n         */\n        postMessage(message: {}): void;\n        /**\n         * 结束当前 worker 线程，仅限在主线程 worker 对象上调用。\n         */\n        terminate(): void;\n    }\n\n    /**\n    * 创建一个 Worker 线程，目前限制最多只能创建一个 Worker，创建下一个 Worker 前请调用 Worker.terminate\n    */\n    function createWorker(scriptPath: string): Worker;\n}\n\n// /**\n//  * 基础库 2.0.0 开始支持，低版本需做兼容处理。\n//  * 将一个 Canvas 对应的 Texture 绑定到 WebGL 上下文。\n//  */\n// declare var WebGLRenderingContext: {\n//     /**\n//      * \n//      * @param texture WebGL 的纹理类型枚举值\n//      * @param canvas 需要绑定为 Texture 的 Canvas\n//      */\n//     wxBindCanvasTexture: (texture: number, canvas: wx.Canvas) => void\n// }"
}