{"version":3,"sources":["assets/Script/Common/Utils/Pool.ts"],"names":[],"mappings":";;;;;;;AAIA;IASI,cAAY,EAAW,EAAE,IAAY;QACjC,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAI,IAAI,CAAC,CAAC;QAEjC,KAAI,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,IAAI,EAAE,CAAC,EAAE,EAAE;YACtB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC;SACzB;IACL,CAAC;IAZD,sBAAW,2BAAS;aAApB;YACI,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QAC9B,CAAC;;;OAAA;IAYM,oBAAK,GAAZ;QAAa,gBAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,2BAAc;;QACvB,IAAG,IAAI,CAAC,IAAI,GAAG,CAAC,EAAE;YACd,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;SAC1D;QACD,IAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9B,EAAE,IAAI,CAAC,IAAI,CAAC;QAEZ,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,OAAP,GAAG,EAAQ,MAAM,CAAC,CAAC;QAC9B,OAAO,GAAG,CAAC;IACf,CAAC;IAEM,mBAAI,GAAX,UAAY,GAAM;QACd,EAAG,IAAI,CAAC,IAAI,CAAC;QACb,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC;QACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;IACjC,CAAC;IAEM,oBAAK,GAAZ,UAAa,EAAoB;QAC7B,KAAI,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;YAC3B,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SAC5B;QACD,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACtB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;IACnB,CAAC;IAGO,sBAAO,GAAf,UAAgB,IAAY;QACxB,IAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;QACxB,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;QAE9B,IAAM,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC;QAC9B,KAAI,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,GAAG,EAAE,CAAC,EAAE,EAAE;YACrB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;SAC/B;QAED,KAAI,IAAI,CAAC,GAAC,GAAG,EAAC,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE;YACjC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;SAC3B;QAED,IAAI,CAAC,IAAI,IAAI,GAAG,CAAC;IACrB,CAAC;IACL,WAAC;AAAD,CA7DA,AA6DC,IAAA;AA7DY,oBAAI","file":"","sourceRoot":"/","sourcesContent":["export interface IPool {\n    use?(...params: any): any;\n    free?(): any;\n}\nexport class Pool<T extends IPool> {\n    private _fn: () => T;\n    private _idx: number;\n    private _frees: T[];\n\n    public get freeCount() {\n        return this._frees.length;\n    }\n\n    constructor(fn: () => T, size: number) {\n        this._fn = fn;\n        this._idx = size - 1;\n        this._frees = new Array<T>(size);\n\n        for(let i=0; i<size; i++) {\n            this._frees[i] = fn();\n        }\n    }\n\n    public alloc(...params: any): T {\n        if(this._idx < 0) {\n            this._expand(Math.round(this._frees.length * 1.2) + 1);\n        }\n        const obj = this._frees[this._idx];\n        this._frees.splice(this._idx);\n        --this._idx;\n\n        obj.use && obj.use(...params);\n        return obj;\n    }\n\n    public free(obj: T) {\n        ++ this._idx;\n        obj.free && obj.free();\n        this._frees[this._idx] = obj;\n    }\n\n    public clear(fn: (obj: T) => void) {\n        for(let i=0; i<this._idx; i++) {\n            fn && fn(this._frees[i]);\n        }\n        this._frees.splice(0);\n        this._idx = -1;\n    }\n\n\n    private _expand(size: number) {\n        const old = this._frees;\n        this._frees = new Array(size);\n\n        const len = size - old.length;\n        for(let i=0; i<len; i++) {\n            this._frees[i] = this._fn();\n        }\n\n        for(let i=len,j=0; i<size; ++i, ++j) {\n            this._frees[i] = old[j];\n        }\n\n        this._idx += len;\n    }\n}"]}