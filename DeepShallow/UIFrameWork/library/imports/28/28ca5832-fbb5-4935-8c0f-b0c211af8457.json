{
  "__type__": "cc.TextAsset",
  "_name": "utils.d",
  "_objFlags": 0,
  "_native": "",
  "text": "export declare const assign: {\r\n    <T, U>(target: T, source: U): T & U;\r\n    <T_1, U_1, V>(target: T_1, source1: U_1, source2: V): T_1 & U_1 & V;\r\n    <T_2, U_2, V_1, W>(target: T_2, source1: U_2, source2: V_1, source3: W): T_2 & U_2 & V_1 & W;\r\n    (target: object, ...sources: any[]): any;\r\n};\r\nexport declare const getDescriptor: (o: any, p: string | number | symbol) => PropertyDescriptor | undefined;\r\nexport declare const defineProperty: (o: any, p: string | number | symbol, attributes: PropertyDescriptor & ThisType<any>) => any;\r\nexport declare const objectPrototype: Object;\r\nexport declare const EMPTY_ARRAY: never[];\r\nexport declare const EMPTY_OBJECT: {};\r\nexport interface Lambda {\r\n    (): void;\r\n    name?: string;\r\n}\r\nexport declare function assertProxies(): void;\r\nexport declare function warnAboutProxyRequirement(msg: string): void;\r\nexport declare function getNextId(): number;\r\n/**\r\n * Makes sure that the provided function is invoked at most once.\r\n */\r\nexport declare function once(func: Lambda): Lambda;\r\nexport declare const noop: () => void;\r\nexport declare function isFunction(fn: any): fn is Function;\r\nexport declare function isString(value: any): value is string;\r\nexport declare function isStringish(value: any): value is string | number | symbol;\r\nexport declare function isObject(value: any): value is Object;\r\nexport declare function isPlainObject(value: any): boolean;\r\nexport declare function isGenerator(obj: any): boolean;\r\nexport declare function addHiddenProp(object: any, propName: PropertyKey, value: any): void;\r\nexport declare function addHiddenFinalProp(object: any, propName: PropertyKey, value: any): void;\r\nexport declare function createInstanceofPredicate<T>(name: string, theClass: new (...args: any[]) => T): (x: any) => x is T;\r\nexport declare function isES6Map(thing: any): boolean;\r\nexport declare function isES6Set(thing: any): thing is Set<any>;\r\n/**\r\n * Returns the following: own enumerable keys and symbols.\r\n */\r\nexport declare function getPlainObjectKeys(object: any): (string | symbol)[];\r\nexport declare const ownKeys: (target: any) => PropertyKey[];\r\nexport declare function stringifyKey(key: any): string;\r\nexport declare function toPrimitive(value: any): any;\r\nexport declare function hasProp(target: Object, prop: PropertyKey): boolean;\r\nexport declare const getOwnPropertyDescriptors: <T>(o: T) => { [P in keyof T]: TypedPropertyDescriptor<T[P]>; } & {\r\n    [x: string]: PropertyDescriptor;\r\n};\r\n"
}