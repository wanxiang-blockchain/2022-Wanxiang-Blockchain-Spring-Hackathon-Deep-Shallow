{
  "__type__": "cc.TextAsset",
  "_name": "observablearray.d",
  "_objFlags": 0,
  "_native": "",
  "text": "import { IAtom, IEnhancer, IInterceptable, IInterceptor, IListenable, Lambda } from \"../mobx\";\r\nexport declare const UPDATE = \"update\";\r\nexport declare const MAX_SPLICE_SIZE = 10000;\r\nexport interface IObservableArray<T = any> extends Array<T> {\r\n    spliceWithArray(index: number, deleteCount?: number, newItems?: T[]): T[];\r\n    clear(): T[];\r\n    replace(newItems: T[]): T[];\r\n    remove(value: T): boolean;\r\n    toJSON(): T[];\r\n}\r\ninterface IArrayBaseChange<T> {\r\n    object: IObservableArray<T>;\r\n    observableKind: \"array\";\r\n    debugObjectName: string;\r\n    index: number;\r\n}\r\nexport declare type IArrayDidChange<T = any> = IArrayUpdate<T> | IArraySplice<T>;\r\nexport interface IArrayUpdate<T = any> extends IArrayBaseChange<T> {\r\n    type: \"update\";\r\n    newValue: T;\r\n    oldValue: T;\r\n}\r\nexport interface IArraySplice<T = any> extends IArrayBaseChange<T> {\r\n    type: \"splice\";\r\n    added: T[];\r\n    addedCount: number;\r\n    removed: T[];\r\n    removedCount: number;\r\n}\r\nexport interface IArrayWillChange<T = any> {\r\n    object: IObservableArray<T>;\r\n    index: number;\r\n    type: \"update\";\r\n    newValue: T;\r\n}\r\nexport interface IArrayWillSplice<T = any> {\r\n    object: IObservableArray<T>;\r\n    index: number;\r\n    type: \"splice\";\r\n    added: T[];\r\n    removedCount: number;\r\n}\r\nexport declare class ObservableArrayAdministration implements IInterceptable<IArrayWillChange<any> | IArrayWillSplice<any>>, IListenable {\r\n    owned_: boolean;\r\n    legacyMode_: boolean;\r\n    atom_: IAtom;\r\n    readonly values_: any[];\r\n    interceptors_: any;\r\n    changeListeners_: any;\r\n    enhancer_: (newV: any, oldV: any | undefined) => any;\r\n    dehancer: any;\r\n    proxy_: IObservableArray<any>;\r\n    lastKnownLength_: number;\r\n    constructor(name: string | undefined, enhancer: IEnhancer<any>, owned_: boolean, legacyMode_: boolean);\r\n    dehanceValue_(value: any): any;\r\n    dehanceValues_(values: any[]): any[];\r\n    intercept_(handler: IInterceptor<IArrayWillChange<any> | IArrayWillSplice<any>>): Lambda;\r\n    observe_(listener: (changeData: IArrayDidChange<any>) => void, fireImmediately?: boolean): Lambda;\r\n    getArrayLength_(): number;\r\n    setArrayLength_(newLength: number): void;\r\n    updateArrayLength_(oldLength: number, delta: number): void;\r\n    spliceWithArray_(index: number, deleteCount?: number, newItems?: any[]): any[];\r\n    spliceItemsIntoValues_(index: number, deleteCount: number, newItems: any[]): any[];\r\n    notifyArrayChildUpdate_(index: number, newValue: any, oldValue: any): void;\r\n    notifyArraySplice_(index: number, added: any[], removed: any[]): void;\r\n    get_(index: number): any | undefined;\r\n    set_(index: number, newValue: any): void;\r\n}\r\nexport declare function createObservableArray<T>(initialValues: T[] | undefined, enhancer: IEnhancer<T>, name?: string, owned?: boolean): IObservableArray<T>;\r\nexport declare var arrayExtensions: {\r\n    clear(): any[];\r\n    replace(newItems: any[]): any[];\r\n    toJSON(): any[];\r\n    splice(index: number, deleteCount?: number | undefined, ...newItems: any[]): any[];\r\n    spliceWithArray(index: number, deleteCount?: number | undefined, newItems?: any[] | undefined): any[];\r\n    push(...items: any[]): number;\r\n    pop(): any;\r\n    shift(): any;\r\n    unshift(...items: any[]): number;\r\n    reverse(): any[];\r\n    sort(): any[];\r\n    remove(value: any): boolean;\r\n};\r\nexport declare function isObservableArray(thing: any): thing is IObservableArray<any>;\r\nexport {};\r\n"
}