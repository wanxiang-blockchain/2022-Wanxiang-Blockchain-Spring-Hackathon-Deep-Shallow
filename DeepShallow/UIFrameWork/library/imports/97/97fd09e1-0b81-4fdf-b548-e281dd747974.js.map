{"version":3,"sources":["assets/Script/Common/Utils/PolygonUtil.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["export class PolygonUtil {\n    /**\n     * \n     * @param l0 \n     * @param l1 \n     * @param polygon 逆时针\n     * @param useDichotomy \n     */\n    public static splitPolygonByLine(l0: cc.Vec2, l1: cc.Vec2, polygon: cc.Vec2[], useDichotomy = false) {\n        let result: number[] = [];\n        for(let i=polygon.length-1; i>=0; i--) {\n            let p0 = polygon[i], \n            p1 = i==0 ? polygon[polygon.length-1] : polygon[i-1];\n            let [n, p] = this.lineCrossPoint(p0, p1, l0, l1);\n            if(n == -1) continue;\n            polygon.splice(i, -1, p);\n            result.push(i+1);\n        }\n        return result;\n    }\n    //求两条线段的交点\n    //返回值：[n,p] n:0相交，1在共有点，-1不相交  p:交点\n    public static lineCrossPoint(p1:cc.Vec2,p2:cc.Vec2,q1:cc.Vec2,q2:cc.Vec2): [number, cc.Vec2]{\n        let a = p1,b = p2,c = q1,d = q2;\n        let s1,s2,s3,s4;\n        let d1,d2,d3,d4;\n        let p:cc.Vec2 = new cc.Vec2(0,0);\n        d1=this.dblcmp(s1=this.ab_cross_ac(a,b,c),0);\n        d2=this.dblcmp(s2=this.ab_cross_ac(a,b,d),0);\n        d3=this.dblcmp(s3=this.ab_cross_ac(c,d,a),0);\n        d4=this.dblcmp(s4=this.ab_cross_ac(c,d,b),0);\n    \n        //如果规范相交则求交点\n        if ((d1^d2)==-2 && (d3^d4)==-2)\n        {\n            p.x=(c.x*s2-d.x*s1)/(s2-s1);\n            p.y=(c.y*s2-d.y*s1)/(s2-s1);\n            return [0,p];\n        }\n    \n        //如果不规范相交\n        if (d1==0 && this.point_on_line(c,a,b)<=0)\n        {\n            p=c;\n            return [1,p];\n        }\n        if (d2==0 && this.point_on_line(d,a,b)<=0)\n        {\n            p=d;\n            return [1,p];\n        }\n        if (d3==0 && this.point_on_line(a,c,d)<=0)\n        {\n            p=a;\n            return [1,p];\n        }\n        if (d4==0 && this.point_on_line(b,c,d)<=0)\n        {\n            p=b;\n            return [1,p];\n        }\n    //如果不相交\n        return [-1,null];\n    }\n    //两条线段是否跨立\n    //即非平行\n    public static isLineSegmentCross(P1:cc.Vec2,P2:cc.Vec2,Q1:cc.Vec2,Q2:cc.Vec2)\n    {\n        if(\n            ((Q1.x-P1.x)*(Q1.y-Q2.y)-(Q1.y-P1.y)*( Q1.x-Q2.x)) * ((Q1.x-P2.x)*(Q1.y-Q2.y)-(Q1.y-P2.y)*(Q1.x-Q2.x)) < 0 ||\n            ((P1.x-Q1.x)*(P1.y-P2.y)-(P1.y-Q1.y)*(P1.x-P2.x)) * ((P1.x-Q2.x)*(P1.y-P2.y)-(P1.y-Q2.y)*( P1.x-P2.x)) < 0\n        ) \n        {\n            return true;\n        }\n        return false;\n    }\n \n    //求a点是不是在线段上，>0不在，=0与端点重合，<0在。\n    public static point_on_line(a,p1,p2) \n    {\n        return this.dblcmp(this.dot(p1.x-a.x,p1.y-a.y,p2.x-a.x,p2.y-a.y),0);\n    }\n    //点发出的右射线和线段的关系\n    // 返回值: -1:不相交, 0:相交, 1:点在线段上\n    public static rayPointToLine(point:cc.Vec2,linePA:cc.Vec2,linePB:cc.Vec2){\n        // 定义最小和最大的X Y轴值  \n        let minX = Math.min(linePA.x,linePB.x);\n        let maxX = Math.max(linePA.x,linePB.x);\n        let minY = Math.min(linePA.y,linePB.y);\n        let maxY = Math.max(linePA.y,linePB.y);  \n \n        // 射线与边无交点的其他情况  \n        if (point.y < minY || point.y > maxY || point.x > maxX) {  \n            return -1;  \n        }  \n \n        // 剩下的情况, 计算射线与边所在的直线的交点的横坐标  \n        let x0 = linePA.x + ((linePB.x - linePA.x) / (linePB.y - linePA.y)) * (point.y - linePA.y);  \n        if(x0 > point.x)\n        {\n            return 0;\n        }\n        if(x0 == point.x)\n        {\n            return 1;\n        }\n        return -1;\n    }\n \n    //点和多边形的关系\n    //返回值: -1:在多边形外部, 0:在多边形内部, 1:在多边形边线内, 2:跟多边形某个顶点重合\n    public static relationPointToPolygon(point:cc.Vec2,polygon:cc.Vec2[])\n    {\n        let count = 0;\n        for(let i = 0;i<polygon.length;++i)\n        {\n            if(polygon[i].equals(point))\n            {\n                return 2;\n            }\n \n            let pa = polygon[i];\n            let pb = polygon[0];\n            if(i < polygon.length -1)\n            {\n                pb = polygon[i+1];\n            }\n            \n            let re = this.rayPointToLine(point,pa,pb);\n            if(re == 1) \n            {\n                return 1;\n            }\n            if(re == 0)\n            {\n                count++;\n            }\n        }\n        if(count %2 == 0)\n        {\n            return -1;\n        } \n        return 0;\n    }\n \n    //线段对多边形进行切割\n    //返回多边形数组\n    //如果没有被切割，返回空数组\n    public static lineCutPolygon(pa:cc.Vec2,pb:cc.Vec2,polygon:cc.Vec2[]){\n        let ret:Array<cc.Vec2[]> = [];\n \n        let points:cc.Vec2[] = [];\n        let pointIndex:number[] = [];\n \n        //将所有的点以及交点组成一个点序列\n        for(let i = 0;i<polygon.length;++i)\n        {\n            points.push(polygon[i]);\n \n            let a = polygon[i];\n            let b = polygon[0];\n            if(i < polygon.length -1) b = polygon[i+1];\n \n            let c = this.lineCrossPoint(pa,pb,a,b);\n            if(c[0] == 0){\n                pointIndex.push(points.length);\n                points.push(c[1] as cc.Vec2);\n            }\n            else if(c[0] > 0)\n            {\n                if((c[1] as cc.Vec2).equals(a))\n                {\n                    pointIndex.push(points.length-1);\n                }\n                else\n                {\n                    pointIndex.push(points.length);\n                }\n            }\n        }\n        if(pointIndex.length > 1)\n        {\n            //准备从第一个交点开始拆，先弄清楚第一个交点是由外穿内，还是内穿外\n            let cp0 = points[pointIndex[0]];\n            let cp1 = points[pointIndex[1]];\n \n            let r = this.relationPointToPolygon(new cc.Vec2((cp0.x + cp1.x)/2,(cp0.y+cp1.y)/2),polygon);\n            let inPolygon:boolean = r >=0;\n            \n            // if(pointIndex.length > 2 && cc.pDistance(cp0,cp1) > cc.pDistance(cp0,points[pointIndex[pointIndex.length-1]])) {\n            if(pointIndex.length > 2 && cp0.sub(cp1).mag() > cp0.sub(points[pointIndex[pointIndex.length-1]]).mag()) {\n                cp1 = points[pointIndex[pointIndex.length-1]];\n                r = this.relationPointToPolygon(new cc.Vec2((cp0.x + cp1.x)/2,(cp0.y+cp1.y)/2),polygon);\n                inPolygon = r <0;\n            }\n            \n            let firstInPolygon = inPolygon;//起始点是从外面穿到里面\n \n            let index = 0;\n            let startIndex = pointIndex[index];\n            let oldPoints = [];\n            let newPoints = [];\n            let count = 0;\n \n            oldPoints.push(points[startIndex]);\n            if(inPolygon)\n            {\n                newPoints.push(points[startIndex]);\n            }\n \n            index++;\n            count++;\n            startIndex++;\n \n            while(count < points.length)\n            {\n                if(startIndex == points.length) startIndex = 0;\n                let p = points[startIndex];\n                if(index >= 0 && startIndex == pointIndex[index])\n                {\n                    //又是一个交点\n                    index++;\n                    if(index >= pointIndex.length) index = 0;\n                    if(inPolygon){\n                        //原来是在多边形内部\n                        //产生了新的多边形\n                        newPoints.push(p);\n                        ret.push(newPoints);\n                        newPoints = [];\n                    }\n                    else\n                    {\n                        //开始新的多边形\n                        newPoints = [];\n                        newPoints.push(p);\n                    }\n                    oldPoints.push(p);\n                    inPolygon = !inPolygon;\n                }                \n                else\n                {\n                    //普通的点\n                    if(inPolygon)\n                    {\n                        newPoints.push(p);\n                    }\n                    else\n                    {\n                        oldPoints.push(p);\n                    }\n                }\n                startIndex++;\n                count++;\n            }\n            if(inPolygon)\n            {\n                if(!firstInPolygon && newPoints.length > 1)\n                {\n                    //如果起始点是从里面穿出去，到这里跟起始点形成闭包\n                    newPoints.push(points[pointIndex[0]]);\n                    ret.push(newPoints);\n                }\n                else\n                {\n                    //结束了，但是现在的状态是穿在多边形内部\n                    //把newPoints里面的回复到主多边形中\n                    for(let i = 0;i<newPoints.length;++i)\n                    {\n                        oldPoints.push(newPoints[i]);\n                    }\n                }\n                \n            }\n \n            ret.push(oldPoints);\n        }\n        return ret;\n    }\n \n    \n    private static ab_cross_ac(a,b,c) //ab与ac的叉积\n    {\n        return this.cross(b.x-a.x,b.y-a.y,c.x-a.x,c.y-a.y);\n    }\n    private static dot(x1,y1,x2,y2){\n        return x1*x2+y1*y2;\n    }\n    private static cross(x1,y1,x2,y2){\n        return x1*y2 - x2*y1;\n    }\n    private static dblcmp(a:number,b:number)\n    {\n        if (Math.abs(a-b)<=0.000001) return 0;\n        if (a>b) return 1;\n        else return -1;\n    }\n}"]}