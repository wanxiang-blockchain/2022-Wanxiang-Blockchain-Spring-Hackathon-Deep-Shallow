{"version":3,"sources":["assets/Script/Common/Assemblers/TextureAssembler.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import TexturePlus from \"../Components/TexturePlus\";\nimport { CommonUtils } from \"../Utils/CommonUtils\";\n\nconst gfx = cc['gfx'];\n\n// 顶点格式 -> 位置 UV, 颜色\nlet vfmtPosUvColor = new gfx.VertexFormat([\n    { name: gfx.ATTR_POSITION, type: gfx.ATTR_TYPE_FLOAT32, num: 2 },\n    { name: gfx.ATTR_UV0, type: gfx.ATTR_TYPE_FLOAT32, num: 2 },\n    { name: gfx.ATTR_COLOR, type: gfx.ATTR_TYPE_UINT8, num: 4, normalize: true },\n]);\n/**\n * assembler for texture\n */\nexport default class TextureAssembler extends cc.Assembler {\n    constructor() {\n        super();\n        this._renderData = new cc.RenderData();\n        this._renderData.init(this);\n\n        this.initData();\n    }\n    verticesCount = 4;\n    indicesCount = 6;\n\n    floatsPerVert = 5;\n    uvOffset = 2;       \n    colorOffset = 4;    \n\n    private _renderData: cc.RenderData = null;\n\n    get verticesFloats() {\n        return this.verticesCount * this.floatsPerVert;\n    }\n\n    public getVfmt() {\n        return vfmtPosUvColor;\n    }\n    public getBuffer() {\n        return cc.renderer['_handle'].getBuffer('mesh', this.getVfmt());\n    }\n\n    public initData() {\n        let data = this._renderData;\n        data.createQuadData(0, this.verticesFloats, this.indicesCount);\n    }\n\n    public resetData(comp: TexturePlus) {\n        let points = comp.polygon;\n        if(!points || points.length < 3) return ;\n        this.verticesCount = points.length;\n        this.indicesCount = this.verticesCount + (this.verticesCount - 3) * 2;\n        this._renderData['clear']();\n        this.initData();\n    }\n\n    public initQuadIndices(indices: number[], arr: number[]) {\n        for(let i=0; i<arr.length; i++) {\n            indices[i] = arr[i];\n        }\n    }\n\n    /** 填充顶点的color */\n    public updateColor(comp: TexturePlus, color: number) {\n        let uintVerts = this._renderData.uintVDatas[0];\n        if(!uintVerts) return ;\n        color = color != null ? color : comp.node.color['_val'];\n        let floatsPerVert = this.floatsPerVert;\n        let colorOffset = this.colorOffset;\n\n        let polygon = comp.polygon;\n        for(let i=0; i<polygon.length; i++) {\n            uintVerts[colorOffset + i * floatsPerVert] = color;\n        }        \n    }\n    /** 更新uv */\n    protected updateUVs(comp: TexturePlus) {\n        let uvOffset = this.uvOffset;\n        let floatsPerVert = this.floatsPerVert;\n        let verts = this._renderData.vDatas[0];\n\n        let uvs = CommonUtils.computeUv(comp.polygon, comp.node.width, comp.node.height)        \n        let polygon = comp.polygon;\n        for(let i=0; i<polygon.length; i++) {\n            let dstOffset = floatsPerVert * i + uvOffset;\n            verts[dstOffset] = uvs[i].x;\n            verts[dstOffset + 1] = uvs[i].y;\n        }\n    }\n\n    protected updateWorldVertsWebGL(comp: TexturePlus) {\n        let verts = this._renderData.vDatas[0];\n\n        let matrix: cc.Mat4 = comp.node['_worldMatrix'];\n        let matrixm = matrix.m,\n        a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5], \n        tx = matrixm[12], ty = matrixm[13];\n\n        let justTranslate = a === 1 && b === 0 && c === 0 && d === 1;\n        let floatsPerVert = this.floatsPerVert;\n        if (justTranslate) {\n            let polygon = comp.polygon;\n            for(let i=0; i<polygon.length; i++) {\n                verts[i * floatsPerVert] = polygon[i].x + tx;\n                verts[i * floatsPerVert+1] = polygon[i].y + ty;\n            }\n        } else {\n            let polygon  = comp.polygon;\n            for(let i=0; i<polygon.length; i++) {\n                verts[i * floatsPerVert] = a * polygon[i].x + c * polygon[i].y + tx;\n                verts[i * floatsPerVert+1] = b * polygon[i].x + d * polygon[i].y + ty;\n            }\n        }\n    }\n\n    protected updateWorldVertsNative(comp: TexturePlus) {\n        let verts = this._renderData.vDatas[0];\n        let floatsPerVert = this.floatsPerVert;\n      \n        let polygon = comp.polygon;\n        for(let i=0; i<polygon.length; i++) {\n            verts[i * floatsPerVert] = polygon[i].x;\n            verts[i * floatsPerVert+1] = polygon[i].y;\n        }\n    }\n\n    protected updateWorldVerts(comp: TexturePlus) {\n        if (CC_NATIVERENDERER) {\n            this.updateWorldVertsNative(comp);\n        } else {\n            this.updateWorldVertsWebGL(comp);\n        }\n    }\n\n    /** 更新顶点数据 */\n    protected updateVerts(comp: TexturePlus) {\n        let indicesArr = CommonUtils.splitePolygon(comp.polygon); \n        this.initQuadIndices(this._renderData.iDatas[0], indicesArr);\n        this.updateWorldVerts(comp);\n    }\n\n    /** 更新renderdata */\n    protected updateRenderData(comp: TexturePlus) {\n        if (comp._vertsDirty) {\n            this.resetData(comp);\n            this.updateUVs(comp);\n            this.updateVerts(comp);\n            this.updateColor(comp, null);\n            comp._vertsDirty = false;\n        }\n    } \n\n    //每帧都会被调用\n    fillBuffers(comp: TexturePlus, renderer) {\n        if (renderer.worldMatDirty) {\n            this.updateWorldVerts(comp);\n        }\n\n        let renderData = this._renderData;\n\n        // vData里包含 pos， uv， color数据， iData中包含顶点索引\n        let vData = renderData.vDatas[0];\n        let iData = renderData.iDatas[0];\n\n        let buffer = this.getBuffer();\n        let offsetInfo = buffer.request(this.verticesCount, this.indicesCount);\n\n        // buffer data may be realloc, need get reference after request.\n\n        // fill vertices\n        let vertexOffset = offsetInfo.byteOffset >> 2,\n            vbuf = buffer._vData;\n        if (vData.length + vertexOffset > vbuf.length) {\n            vbuf.set(vData.subarray(0, vbuf.length - vertexOffset), vertexOffset);\n        } else {\n            vbuf.set(vData, vertexOffset);\n        }\n\n        // fill indices\n        let ibuf = buffer._iData,\n            indiceOffset = offsetInfo.indiceOffset,\n            vertexId = offsetInfo.vertexOffset;\n        for (let i = 0, l = iData.length; i < l; i++) {\n            ibuf[indiceOffset++] = vertexId + iData[i];\n        }\n    }\n  \n    packToDynamicAtlas(comp: TexturePlus, frame: any) {\n        if (CC_TEST) return;\n        \n        if (!frame._original && cc.dynamicAtlasManager && frame._texture.packable) {\n            let packedFrame = cc.dynamicAtlasManager.insertSpriteFrame(frame);            \n            if (packedFrame) {\n                frame._setDynamicAtlasFrame(packedFrame);\n            }\n        }\n        let material = comp['_materials'][0];\n        if (!material) return;\n        \n        if (material.getProperty('texture') !== frame._texture) {\n            // texture was packed to dynamic atlas, should update uvs\n            comp._vertsDirty = true;\n            comp._updateMaterial();\n        }\n    }\n}"]}