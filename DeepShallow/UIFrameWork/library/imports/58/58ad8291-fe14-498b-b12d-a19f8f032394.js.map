{"version":3,"sources":["assets/Script/Common/Components/TexturePlus.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import TextureAssembler from \"../Assemblers/TextureAssembler\";\nimport { CommonUtils } from \"../Utils/CommonUtils\";\n\nconst renderEngine = cc.renderer.renderEngine;\n\nenum TextureType {\n    Cut,            // 裁剪\n    Stretch         // 拉伸, 暂未实现\n}\n\nlet _vec2_temp = new cc.Vec2();\nlet _mat4_temp = new cc.Mat4();\n\nconst {ccclass, menu, executeInEditMode, mixins, property} = cc._decorator;\n\n@ccclass\n@executeInEditMode\n@menu('i18n:MAIN_MENU.component.ui/TexturePlus')\n@mixins(cc.BlendFunc)\nexport default class TexturePlus extends cc.RenderComponent {\n    static Type = TextureType;\n    \n    @property(cc.Texture2D)\n    _texture: cc.Texture2D = null;\n    @property(cc.Texture2D)\n    get texture() {\n        return this._texture;\n    }\n    set texture(val: cc.Texture2D) {\n        this._texture = val;\n        let l = -val.width/2, b = -val.height/2, t = val.height/2, r = val.width/2;\n        this.polygon = [cc.v2(l, b), cc.v2(r, b), cc.v2(r, t), cc.v2(l, t)];\n        this.node.width = val.width; this.node.height = val.height;\n        this._updateMaterial();\n    }\n\n    // _type: TextureType = 0;\n    // @property({type: cc.Enum(TextureType), serializable: true})\n    // get type() {\n    //     return this._type;\n    // }\n    // set type(val: TextureType) {\n    //     this._type = val;\n    //     this.setVertsDirty();\n    // }\n\n    @property({type: [cc.Vec2], serializable: true})\n    _polygon: cc.Vec2[] = [];\n    @property({type: [cc.Vec2], serializable: true})\n    public get polygon() {\n        return this._polygon;\n    }\n    public set polygon(points: cc.Vec2[]) {\n        this._polygon = points;\n        this._updateVerts();\n    }\n\n    @property({type: cc.Enum(cc.macro.BlendFactor), override: true})\n    srcBlendFactor: cc.macro.BlendFactor = cc.macro.BlendFactor.SRC_ALPHA;\n\n    @property({type: cc.Enum(cc.macro.BlendFactor), override: true})\n    dstBlendFactor: cc.macro.BlendFactor = cc.macro.BlendFactor.ONE_MINUS_SRC_ALPHA;\n\n    @property(cc.Boolean)\n    editing: boolean = false;\n    \n    _assembler: cc.Assembler = null;\n\n    onLoad() {\n        this.node['_hitTest'] = this._hitTest.bind(this);\n    }\n\n    start() {\n        this.node.on(cc.Node.EventType.TOUCH_START, () => {\n            console.log(\"click texture plus\");\n        }, this);\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, (e: cc.Event.EventTouch) => {\n            this.node.x += e.getDeltaX();\n            this.node.y += e.getDeltaY();\n        }, this);\n    }\n\n    private _updateVerts() {\n        this.setVertsDirty();\n    }\n\n    public _updateMaterial() {\n        let texture = this._texture;\n        let material = this.getMaterial(0);\n        if(material) {\n            if(material.getDefine(\"USE_TEXTURE\") !== undefined) {\n                material.define(\"USE_TEXTURE\", true);\n            }\n            material.setProperty(\"texture\", texture);\n        }\n        this['__proto__']._updateBlendFunc.call(this);\n        this.setVertsDirty();        \n    }\n\n    public _validateRender() {\n        \n    }\n\n    public _resetAssembler() {\n        let assembler = this._assembler = new TextureAssembler();\n        assembler.init(this);\n        this._updateColor();\n        this.setVertsDirty();\n    }\n\n    _hitTest (cameraPt: cc.Vec2) {\n        let node = this.node;\n        let size = node.getContentSize(),\n            w = size.width,\n            h = size.height,\n            testPt = _vec2_temp;\n        \n        node['_updateWorldMatrix']();\n        // If scale is 0, it can't be hit.\n        if (!cc.Mat4.invert(_mat4_temp, node['_worldMatrix'])) {\n            return false;\n        }\n        cc.Vec2.transformMat4(testPt, cameraPt, _mat4_temp);\n        return CommonUtils.isInPolygon(testPt, this.polygon);\n    }\n}"]}