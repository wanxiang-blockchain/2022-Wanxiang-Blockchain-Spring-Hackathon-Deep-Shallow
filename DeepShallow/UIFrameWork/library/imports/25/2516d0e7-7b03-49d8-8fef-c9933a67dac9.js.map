{"version":3,"sources":["assets/Script/Common/Utils/LRUCache.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { IPool, Pool } from \"./Pool\";\n\nclass LRUNode implements IPool {\n    value: string;\n    prev: LRUNode;          // 前面的\n    next: LRUNode;          // 后面的\n    constructor(value: string, next: LRUNode) {\n        this.value = value;\n        this.next = next;\n    }\n\n    use(value: string, next: LRUNode) {\n        this.value = value;\n        this.next = next;\n    }\n\n    free() {\n        this.value = '';\n        this.next = null;\n    }\n}\n\n\n/**\n * @author honmono\n * @description 为UIManager写的 lru cache控制.\n */\nexport class LRUCache {\n    public maxSize: number;\n\n    private head: LRUNode;\n    private last: LRUNode;\n    private size: number;\n\n    private nodePool: Pool<LRUNode> = new Pool<LRUNode>(() => {\n        return new LRUNode('', null);\n    }, 3);\n    constructor(maxSize: number) {\n        this.maxSize = maxSize;\n        this.head = new LRUNode('head', null);\n        this.size = 0;\n    }\n\n    public remove(value: string) {\n        let node = this.has(value);\n        node && this.removeNode(node);\n    }\n        \n    public put(value: string) {\n        if(this.size <= 0) {\n            this.last = this.nodePool.alloc(value, null);\n            this.last.prev = this.head;\n            this.head.next = this.last;\n            this.size = 1;\n            return ;\n        }\n        let node = this.has(value);\n        if(!node) {     // 不存在, 直接加到最前面\n            node = this.nodePool.alloc(value, null);\n            this.addHead(node);\n            return ;\n        }\n        // 存在, 把这个node放在最前面\n        if(this.last == node) { // 如果当前node就是last, 那么更换last\n            this.last = node.prev;\n        }\n        this.removeNode(node);\n        this.addHead(node);\n    }\n\n    public needDelete() {\n        return this.size > this.maxSize;\n    }\n\n    public deleteLastNode() {\n        let value = this.last.value;\n        this.removeNode(this.last);\n        this.nodePool.free(this.last);\n        this.last = this.last.prev;\n        return value;\n    }\n\n    private removeNode(node: LRUNode) {\n        node.prev.next = node.next;\n        if(node.next) {\n            node.next.prev = node.prev;\n        }\n        this.size --;\n    }\n\n    /** 向头部插入一个node */\n    private addHead(node: LRUNode) {\n        node.next = this.head.next;\n        if(node.next) {\n            node.next.prev = node;\n        }\n        this.head.next = node;\n        node.prev = this.head;\n        this.size ++;\n    }\n\n    public has(value: string) {\n        let next = this.head.next;\n        while(next) {\n            if(next.value == value) {\n                return next;\n            }\n            next = next.next;\n        }\n        return null;\n    }\n\n    public toString() {\n        let str = '';\n        let next = this.head.next;\n        while(next) {\n            str += next.value + \" \";\n            next = next.next;\n        }\n        return str;\n    }\n}"]}