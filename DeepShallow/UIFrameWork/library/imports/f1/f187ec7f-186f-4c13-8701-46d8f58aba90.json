{
  "__type__": "cc.TextAsset",
  "_name": "observableset.d",
  "_objFlags": 0,
  "_native": "",
  "text": "import { $mobx, IEnhancer, IListenable, Lambda, IInterceptable, IInterceptor } from \"../mobx\";\r\nexport declare type IObservableSetInitialValues<T> = Set<T> | readonly T[];\r\nexport declare type ISetDidChange<T = any> = {\r\n    object: ObservableSet<T>;\r\n    observableKind: \"set\";\r\n    debugObjectName: string;\r\n    type: \"add\";\r\n    newValue: T;\r\n} | {\r\n    object: ObservableSet<T>;\r\n    observableKind: \"set\";\r\n    debugObjectName: string;\r\n    type: \"delete\";\r\n    oldValue: T;\r\n};\r\nexport declare type ISetWillChange<T = any> = {\r\n    type: \"delete\";\r\n    object: ObservableSet<T>;\r\n    oldValue: T;\r\n} | {\r\n    type: \"add\";\r\n    object: ObservableSet<T>;\r\n    newValue: T;\r\n};\r\nexport declare class ObservableSet<T = any> implements Set<T>, IInterceptable<ISetWillChange>, IListenable {\r\n    name_: string;\r\n    [$mobx]: {};\r\n    private data_;\r\n    private atom_;\r\n    changeListeners_: any;\r\n    interceptors_: any;\r\n    dehancer: any;\r\n    enhancer_: (newV: any, oldV: any | undefined) => any;\r\n    constructor(initialData?: IObservableSetInitialValues<T>, enhancer?: IEnhancer<T>, name_?: string);\r\n    private dehanceValue_;\r\n    clear(): void;\r\n    forEach(callbackFn: (value: T, value2: T, set: Set<T>) => void, thisArg?: any): void;\r\n    get size(): number;\r\n    add(value: T): this;\r\n    delete(value: any): boolean;\r\n    has(value: any): boolean;\r\n    entries(): IterableIterator<[T, T]>;\r\n    keys(): IterableIterator<T>;\r\n    values(): IterableIterator<T>;\r\n    replace(other: ObservableSet<T> | IObservableSetInitialValues<T>): ObservableSet<T>;\r\n    observe_(listener: (changes: ISetDidChange<T>) => void, fireImmediately?: boolean): Lambda;\r\n    intercept_(handler: IInterceptor<ISetWillChange<T>>): Lambda;\r\n    toJSON(): T[];\r\n    toString(): string;\r\n    [Symbol.iterator](): IterableIterator<T>;\r\n    get [Symbol.toStringTag](): string;\r\n}\r\nexport declare var isObservableSet: (thing: any) => thing is ObservableSet<any>;\r\n"
}