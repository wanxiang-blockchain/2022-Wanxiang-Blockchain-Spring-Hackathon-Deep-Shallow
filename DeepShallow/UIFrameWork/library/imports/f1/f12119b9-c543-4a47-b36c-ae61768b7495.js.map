{"version":3,"sources":["assets/Script/UIFrame/UIToast.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAAmD;AACnD,6CAAwC;AACxC,mCAA8B;AAG9B,IAAY,SAEX;AAFD,WAAY,SAAS;IACjB,+CAAO,CAAA;AACX,CAAC,EAFW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAEpB;AAGD;;;;GAIG;AAEH;IAA6B,2BAAM;IAAnC;;IASA,CAAC;IAPU,qBAAG,GAAV;IAEA,CAAC;IAEM,sBAAI,GAAX;IAEA,CAAC;IACL,cAAC;AAAD,CATA,AASC,CAT4B,gBAAM,GASlC;AATY,0BAAO;AAWpB;IAAA;QACY,WAAM,GAAmC,EAAE,CAAC;IA6BxD,CAAC;IA3BiB,uBAAI,GAAlB,UAAmB,GAAW;;;;;;6BACvB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAjB,wBAAiB;wBACH,qBAAM,qBAAW,CAAC,WAAW,CAAY,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,EAAA;;wBAAjE,WAAS,SAAwD;wBACrE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,WAAI,CAAU;4BACjC,IAAI,IAAI,GAAG,EAAE,CAAC,WAAW,CAAC,QAAM,CAAC,CAAC;4BAClC,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;wBACtC,CAAC,EAAE,EAAE,CAAC,CAAC;;4BAEX,sBAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAC;;;;KACnC;IAEM,2BAAQ,GAAf,UAAgB,IAAe,EAAE,KAAa;IAE9C,CAAC;IAEa,uBAAI,GAAlB,UAAmB,GAAW,EAAE,GAAY;;;gBACxC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;;;KAC9B;IAEY,uBAAI,GAAjB,UAAkB,IAAY,EAAE,MAAc;;;;;;KAE7C;IAEY,wBAAK,GAAlB,UAAmB,GAAW;;;;;;KAE7B;IAEL,eAAC;AAAD,CA9BA,AA8BC,IAAA;AA9BY,4BAAQ","file":"","sourceRoot":"/","sourcesContent":["import { IPool, Pool } from \"../Common/Utils/Pool\";\nimport CocosHelper from \"./CocosHelper\";\nimport UIBase from \"./UIBase\";\n\n\nexport enum ToastType {\n    Default,\n}\n\n\n/**\n * 外部传参\n * 1. 将prefabUrl注册, 静态\n * 2. UIToast.open 直接打开\n */\n\nexport class UIToast extends UIBase implements IPool {\n\n    public use() {\n        \n    }\n\n    public free() {\n\n    }   \n}\n\nexport class ToastMgr {\n    private _pools: {[key: string]: Pool<UIToast>} = {};\n\n    private async load(url: string) {\n        if(!this._pools[url]) {\n            let prefab = await CocosHelper.loadResSync<cc.Prefab>(url, cc.Prefab);\n            this._pools[url] = new Pool<UIToast>(() => {\n                let node = cc.instantiate(prefab);\n                return node.getComponent(UIToast);\n            }, 10);\n        }\n        return this._pools[url].alloc();\n    }\n\n    public register(type: ToastType, toast: string) {\n\n    }\n\n    private async free(url: string, obj: UIToast) {\n        this._pools[url].free(obj);\n    }\n\n    public async open(name: string, params: number) {\n        \n    }\n\n    public async close(url: string) {\n        \n    }\n\n}\n\n"]}