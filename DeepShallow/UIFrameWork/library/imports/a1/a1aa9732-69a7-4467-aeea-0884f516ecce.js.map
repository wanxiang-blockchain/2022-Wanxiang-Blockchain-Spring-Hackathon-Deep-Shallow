{"version":3,"sources":["assets/Script/Common/Components/MaskPlus.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { CommonUtils } from \"../Utils/CommonUtils\";\n\nexport enum MaskPlusType {\n    /**\n     * !#en Rect mask.\n     * !#zh 使用矩形作为遮罩\n     * @property {Number} RECT\n     */\n    RECT = 0,\n    /**\n     * !#en Ellipse Mask.\n     * !#zh 使用椭圆作为遮罩\n     * @property {Number} ELLIPSE\n     */\n    ELLIPSE = 1,\n    /**\n     * !#en Image Stencil Mask.\n     * !#zh 使用图像模版作为遮罩\n     * @property {Number} IMAGE_STENCIL\n     */\n    IMAGE_STENCIL = 2,\n\n    /**\n     * 多边形遮罩\n     */\n    Polygon = 3,\n}\n\nlet _vec2_temp = new cc.Vec2();\nlet _mat4_temp = new cc.Mat4();\n\nlet _circlepoints =[];\nfunction _calculateCircle (center, radius, segements) {\n    _circlepoints.length = 0;\n    let anglePerStep = Math.PI * 2 / segements;\n    for (let step = 0; step < segements; ++step) {\n        _circlepoints.push(cc.v2(radius.x * Math.cos(anglePerStep * step) + center.x,\n            radius.y * Math.sin(anglePerStep * step) + center.y));\n    }\n\n    return _circlepoints;\n}\n\nclass EllipseConfig {\n    center: cc.Vec2;\n    r: cc.Vec2;\n    segments: number;\n}\n\n/**\n * 遮罩扩展\n * 自定义多边形遮罩\n */\nconst {ccclass, property, executeInEditMode, menu, help, inspector} = cc._decorator;\n@ccclass\n@menu('i18n:MAIN_MENU.component.renderers/MaskPlus') \n@executeInEditMode\n@help('i18n:COMPONENT.help_url.mask')\n@inspector('packages://maskplus/inspector.js')\nexport default class MaskPlus extends cc.Mask {\n\n    static Type = MaskPlusType;\n\n    @property({type: cc.Enum(MaskPlusType), override: true})\n    _type: MaskPlusType = 0;\n    @property({type: cc.Enum(MaskPlusType), override: true})\n    // @ts-ignore\n    get type() {\n        return this._type; \n    }\n    // @ts-ignore\n    set type(value) {\n        if (this._type !== value) {\n            this['_resetAssembler']();\n        }\n\n        this._type = value;\n\n        if(this._type === MaskPlusType.Polygon) {\n            if(this._polygon.length === 0) {\n                let [x, y, width, height] = this.getNodeRect();\n                this._polygon.push(cc.v2(x, y), cc.v2(x+width, y), cc.v2(x+width, y+height), cc.v2(x, y+height));\n            }\n        }\n\n        if (this._type !== MaskPlusType.IMAGE_STENCIL) {\n            this.spriteFrame = null;\n            this.alphaThreshold = 0;\n            this._updateGraphics();\n        }        \n        this['_activateMaterial']();\n    }\n\n    @property({type: [cc.Vec2], serializable: true})\n    _polygon: cc.Vec2[] = [];\n    @property({type: [cc.Vec2], serializable: true})\n    public get polygon() {\n        return this._polygon;\n    }\n    public set polygon(points: cc.Vec2[]) {\n        this._polygon = points;\n        this._updateGraphics();\n    }\n\n    private ellipse: EllipseConfig = new EllipseConfig();\n    public setEllipse(center?: cc.Vec2, r?: cc.Vec2, segments?: number) {\n        this.ellipse.center = center;\n        this.ellipse.r = r;\n        this.ellipse.segments = segments || this.segements;\n    }\n\n    _updateGraphics () {\n        let node = this.node;\n        let graphics = this['_graphics'];\n        // Share render data with graphics content\n        graphics.clear(false);\n        let [x, y, width, height] = this.getNodeRect();\n        if (this['_type'] === MaskPlusType.RECT) {\n            graphics.rect(x, y, width, height);\n        }\n        else if (this['_type'] === MaskPlusType.ELLIPSE) {\n            let center = this.ellipse.center || cc.v2(x + width / 2, y + height / 2);\n            let radius = this.ellipse.r || {x: width / 2,y: height / 2};\n            let segments = this.ellipse.segments || this['_segments'];\n            let points = _calculateCircle(center, radius, segments);\n            for (let i = 0; i < points.length; ++i) {\n                let point = points[i];\n                if (i === 0) {\n                    graphics.moveTo(point.x, point.y);\n                }\n                else {\n                    graphics.lineTo(point.x, point.y);\n                }\n            }\n            graphics.close();\n        }else if(this['_type'] === MaskPlusType.Polygon) {\n            if(this._polygon.length === 0) this._polygon.push(cc.v2(0, 0));\n            graphics.moveTo(this._polygon[0].x, this._polygon[0].y);\n            for(let i=1; i<this._polygon.length; i++) {\n                graphics.lineTo(this._polygon[i].x, this._polygon[i].y);\n            }\n            graphics.lineTo(this._polygon[0].x, this._polygon[0].y);\n        }\n\n        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {\n            graphics.stroke();\n        }\n        else {\n            graphics.fill();\n        }\n    }\n\n    _hitTest (cameraPt: cc.Vec2) {\n        let node = this.node;\n        let size = node.getContentSize(),\n            w = size.width,\n            h = size.height,\n            testPt = _vec2_temp;\n        \n        node['_updateWorldMatrix']();\n        // If scale is 0, it can't be hit.\n        if (!cc.Mat4.invert(_mat4_temp, node['_worldMatrix'])) {\n            return false;\n        }\n        let point = cc.v2(0, 0);\n        cc.Vec2.transformMat4(point, cameraPt, _mat4_temp);\n        testPt.x = point.x + node['_anchorPoint'].x * w;\n        testPt.y = point.y + node['_anchorPoint'].y * h;\n\n        let result = false;\n        if (this.type === MaskPlusType.RECT || this.type === MaskPlusType.IMAGE_STENCIL) {\n            result = testPt.x >= 0 && testPt.y >= 0 && testPt.x <= w && testPt.y <= h;\n        }\n        else if (this.type === MaskPlusType.ELLIPSE) {\n            let rx = w / 2, ry = h / 2;\n            let px = testPt.x - 0.5 * w, py = testPt.y - 0.5 * h;\n            result = px * px / (rx * rx) + py * py / (ry * ry) < 1;\n        }else if(this.type === MaskPlusType.Polygon) {\n            result = CommonUtils.isInPolygon(point, this.polygon);\n        }\n        if (this.inverted) {\n            result = !result;\n        }\n        return result;\n    }\n\n    private getNodeRect() {\n        let width = this.node['_contentSize'].width;\n        let height = this.node['_contentSize'].height;\n        let x = -width * this.node['_anchorPoint'].x;\n        let y = -height * this.node['_anchorPoint'].y;\n        return [x, y, width, height];\n    }\n\n    \n\n}\ncc['MaskPlus'] = MaskPlus;\n"]}