{
  "__type__": "cc.TextAsset",
  "_name": "autorun.d",
  "_objFlags": 0,
  "_native": "",
  "text": "import { IEqualsComparer, IReactionDisposer, IReactionPublic } from \"../mobx\";\r\nexport interface IAutorunOptions {\r\n    delay?: number;\r\n    name?: string;\r\n    /**\r\n     * Experimental.\r\n     * Warns if the view doesn't track observables\r\n     */\r\n    requiresObservable?: boolean;\r\n    scheduler?: (callback: () => void) => any;\r\n    onError?: (error: any) => void;\r\n}\r\n/**\r\n * Creates a named reactive view and keeps it alive, so that the view is always\r\n * updated if one of the dependencies changes, even when the view is not further used by something else.\r\n * @param view The reactive view\r\n * @returns disposer function, which can be used to stop the view from being updated in the future.\r\n */\r\nexport declare function autorun(view: (r: IReactionPublic) => any, opts?: IAutorunOptions): IReactionDisposer;\r\nexport declare type IReactionOptions = IAutorunOptions & {\r\n    fireImmediately?: boolean;\r\n    equals?: IEqualsComparer<any>;\r\n};\r\nexport declare function reaction<T>(expression: (r: IReactionPublic) => T, effect: (arg: T, prev: T, r: IReactionPublic) => void, opts?: IReactionOptions): IReactionDisposer;\r\n"
}