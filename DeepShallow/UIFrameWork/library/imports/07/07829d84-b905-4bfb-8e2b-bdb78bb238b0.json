{
  "__type__": "cc.TextAsset",
  "_name": "observable.d",
  "_objFlags": 0,
  "_native": "",
  "text": "import { Lambda, IDerivation, IDerivationState_ } from \"../mobx\";\r\nexport interface IDepTreeNode {\r\n    name_: string;\r\n    observing_?: IObservable[];\r\n}\r\nexport interface IObservable extends IDepTreeNode {\r\n    diffValue_: number;\r\n    /**\r\n     * Id of the derivation *run* that last accessed this observable.\r\n     * If this id equals the *run* id of the current derivation,\r\n     * the dependency is already established\r\n     */\r\n    lastAccessedBy_: number;\r\n    isBeingObserved_: boolean;\r\n    lowestObserverState_: IDerivationState_;\r\n    isPendingUnobservation_: boolean;\r\n    observers_: Set<IDerivation>;\r\n    onBUO(): void;\r\n    onBO(): void;\r\n    onBUOL: Set<Lambda> | undefined;\r\n    onBOL: Set<Lambda> | undefined;\r\n}\r\nexport declare function hasObservers(observable: IObservable): boolean;\r\nexport declare function getObservers(observable: IObservable): Set<IDerivation>;\r\nexport declare function addObserver(observable: IObservable, node: IDerivation): void;\r\nexport declare function removeObserver(observable: IObservable, node: IDerivation): void;\r\nexport declare function queueForUnobservation(observable: IObservable): void;\r\n/**\r\n * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.\r\n * During a batch `onBecomeUnobserved` will be called at most once per observable.\r\n * Avoids unnecessary recalculations.\r\n */\r\nexport declare function startBatch(): void;\r\nexport declare function endBatch(): void;\r\nexport declare function reportObserved(observable: IObservable): boolean;\r\n/**\r\n * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly\r\n * It will propagate changes to observers from previous run\r\n * It's hard or maybe impossible (with reasonable perf) to get it right with current approach\r\n * Hopefully self reruning autoruns aren't a feature people should depend on\r\n * Also most basic use cases should be ok\r\n */\r\nexport declare function propagateChanged(observable: IObservable): void;\r\nexport declare function propagateChangeConfirmed(observable: IObservable): void;\r\nexport declare function propagateMaybeChanged(observable: IObservable): void;\r\n"
}