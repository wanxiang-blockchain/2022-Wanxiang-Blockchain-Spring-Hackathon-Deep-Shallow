{
  "__type__": "cc.TextAsset",
  "_name": "observablevalue.d",
  "_objFlags": 0,
  "_native": "",
  "text": "import { Atom, IEnhancer, IInterceptable, IEqualsComparer, IInterceptor, IListenable, Lambda } from \"../mobx\";\r\nexport interface IValueWillChange<T> {\r\n    object: IObservableValue<T>;\r\n    type: \"update\";\r\n    newValue: T;\r\n}\r\nexport declare type IValueDidChange<T = any> = {\r\n    type: \"update\";\r\n    observableKind: \"value\";\r\n    object: IObservableValue<T>;\r\n    debugObjectName: string;\r\n    newValue: unknown;\r\n    oldValue: unknown;\r\n};\r\nexport declare type IBoxDidChange<T = any> = {\r\n    type: \"create\";\r\n    observableKind: \"value\";\r\n    object: IObservableValue<T>;\r\n    debugObjectName: string;\r\n    newValue: unknown;\r\n} | IValueDidChange<T>;\r\nexport interface IObservableValue<T> {\r\n    get(): T;\r\n    set(value: T): void;\r\n    intercept_(handler: IInterceptor<IValueWillChange<T>>): Lambda;\r\n    observe_(listener: (change: IValueDidChange<T>) => void, fireImmediately?: boolean): Lambda;\r\n}\r\nexport declare class ObservableValue<T> extends Atom implements IObservableValue<T>, IInterceptable<IValueWillChange<T>>, IListenable {\r\n    enhancer: IEnhancer<T>;\r\n    name_: string;\r\n    private equals;\r\n    hasUnreportedChange_: boolean;\r\n    interceptors_: any;\r\n    changeListeners_: any;\r\n    value_: any;\r\n    dehancer: any;\r\n    constructor(value: T, enhancer: IEnhancer<T>, name_?: string, notifySpy?: boolean, equals?: IEqualsComparer<any>);\r\n    private dehanceValue;\r\n    set(newValue: T): void;\r\n    private prepareNewValue_;\r\n    setNewValue_(newValue: T): void;\r\n    get(): T;\r\n    intercept_(handler: IInterceptor<IValueWillChange<T>>): Lambda;\r\n    observe_(listener: (change: IValueDidChange<T>) => void, fireImmediately?: boolean): Lambda;\r\n    raw(): any;\r\n    toJSON(): T;\r\n    toString(): string;\r\n    valueOf(): T;\r\n    [Symbol.toPrimitive](): T;\r\n}\r\nexport declare const isObservableValue: (x: any) => x is IObservableValue<any>;\r\n"
}