{
  "__type__": "cc.EffectAsset",
  "_name": "EScroll",
  "_objFlags": 0,
  "_native": "",
  "properties": null,
  "techniques": [
    {
      "passes": [
        {
          "blendState": {
            "targets": [
              {
                "blend": true
              }
            ]
          },
          "rasterizerState": {
            "cullMode": 0
          },
          "properties": {
            "texture": {
              "value": "white",
              "type": 29
            },
            "alphaThreshold": {
              "value": [
                0.5
              ],
              "type": 13
            },
            "radius": {
              "value": [
                0.5
              ],
              "editor": {
                "tooltip": "半径"
              },
              "type": 13
            },
            "progress": {
              "value": [
                0.5
              ],
              "type": 13
            },
            "texture2": {
              "value": "white",
              "type": 29
            }
          },
          "program": "EScroll|vs|fs"
        }
      ]
    }
  ],
  "shaders": [
    {
      "hash": 2262251656,
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Custom {\n  float radius;\n  float progress;\n};\nuniform sampler2D texture2;\nvoid main () {\n  vec4 o = vec4(1.0, 1.0, 1.0, 1.0);\n  float primeter = 2.0 * 3.1415926 * radius;\n  float x = v_uv0.x;\n  float outLen = 1.0 - progress;\n  float range = 3.0 / 4.0;\n  vec2 c_uv0 = v_uv0;\n  float realX = v_uv0.x;\n  float offset = x-progress;\n  bool draw = true;\n  bool useTexture2 = false;\n  if(x > progress) {\n    if(outLen <= primeter * 0.25) {\n      if(offset > sin(outLen / radius) * radius) {\n        draw = false;\n      }else {\n        realX = asin(offset / radius) * radius + progress;\n      }\n    }else {\n      if(outLen < primeter * 0.5 && offset < cos((outLen - primeter * 0.25) / radius) * radius) {\n        realX = asin(offset / radius) * radius + progress;\n      }else if(offset >= radius) {\n        draw = false;\n      }else {\n        realX = acos(offset / radius) * radius + progress + primeter * .25;\n        useTexture2 = true;\n      }\n    }\n  }else if(outLen > primeter * 0.5) {\n    if(outLen < primeter * 0.75) {\n      outLen = outLen - primeter * 0.5;\n      if(offset < -sin(outLen / radius) * radius) {\n        realX = realX;\n      }else {\n        realX = asin(-offset / radius) * radius + progress + primeter * 0.5;\n        useTexture2 = true;\n      }\n    }else {\n      if(offset < -radius) {\n        realX = realX;\n      }else {\n        realX = asin(-offset / radius) * radius + progress + primeter * 0.5;\n        useTexture2 = true;\n      }\n    }\n  }else {\n  }\n  if(draw) {\n    c_uv0.x = realX;\n    if(useTexture2) {\n  vec4 texture2_tmp = texture(texture2, c_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture2\n      texture2_tmp.a *= texture(texture2, c_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture2_tmp.rgb * texture2_tmp.rgb);\n    o.a *= texture2_tmp.a;\n  #else\n    o *= texture2_tmp;\n  #endif\n    }else {\n  vec4 texture_tmp = texture(texture, c_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, c_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    }\n  }else {\n    o.a = 0.0;\n  }\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float radius;\nuniform float progress;\nuniform sampler2D texture2;\nvoid main () {\n  vec4 o = vec4(1.0, 1.0, 1.0, 1.0);\n  float primeter = 2.0 * 3.1415926 * radius;\n  float x = v_uv0.x;\n  float outLen = 1.0 - progress;\n  float range = 3.0 / 4.0;\n  vec2 c_uv0 = v_uv0;\n  float realX = v_uv0.x;\n  float offset = x-progress;\n  bool draw = true;\n  bool useTexture2 = false;\n  if(x > progress) {\n    if(outLen <= primeter * 0.25) {\n      if(offset > sin(outLen / radius) * radius) {\n        draw = false;\n      }else {\n        realX = asin(offset / radius) * radius + progress;\n      }\n    }else {\n      if(outLen < primeter * 0.5 && offset < cos((outLen - primeter * 0.25) / radius) * radius) {\n        realX = asin(offset / radius) * radius + progress;\n      }else if(offset >= radius) {\n        draw = false;\n      }else {\n        realX = acos(offset / radius) * radius + progress + primeter * .25;\n        useTexture2 = true;\n      }\n    }\n  }else if(outLen > primeter * 0.5) {\n    if(outLen < primeter * 0.75) {\n      outLen = outLen - primeter * 0.5;\n      if(offset < -sin(outLen / radius) * radius) {\n        realX = realX;\n      }else {\n        realX = asin(-offset / radius) * radius + progress + primeter * 0.5;\n        useTexture2 = true;\n      }\n    }else {\n      if(offset < -radius) {\n        realX = realX;\n      }else {\n        realX = asin(-offset / radius) * radius + progress + primeter * 0.5;\n        useTexture2 = true;\n      }\n    }\n  }else {\n  }\n  if(draw) {\n    c_uv0.x = realX;\n    if(useTexture2) {\n  vec4 texture2_tmp = texture2D(texture2, c_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture2\n      texture2_tmp.a *= texture2D(texture2, c_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture2_tmp.rgb * texture2_tmp.rgb);\n    o.a *= texture2_tmp.a;\n  #else\n    o *= texture2_tmp;\n  #endif\n    }else {\n  vec4 texture_tmp = texture2D(texture, c_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, c_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    }\n  }else {\n    o.a = 0.0;\n  }\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "builtins": {
        "globals": {
          "blocks": [
            {
              "name": "CCGlobal",
              "defines": []
            }
          ],
          "samplers": []
        },
        "locals": {
          "blocks": [
            {
              "name": "CCLocal",
              "defines": []
            }
          ],
          "samplers": []
        }
      },
      "defines": [
        {
          "name": "USE_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_MODEL",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_ALPHA_TEST",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_ALPHA_ATLAS_texture2",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "INPUT_IS_GAMMA",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_ALPHA_ATLAS_texture",
          "type": "boolean",
          "defines": []
        }
      ],
      "blocks": [
        {
          "name": "ALPHA_TEST",
          "members": [
            {
              "name": "alphaThreshold",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [
            "USE_ALPHA_TEST"
          ],
          "binding": 0
        },
        {
          "name": "Custom",
          "members": [
            {
              "name": "radius",
              "type": 13,
              "count": 1
            },
            {
              "name": "progress",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [],
          "binding": 1
        }
      ],
      "samplers": [
        {
          "name": "texture",
          "type": 29,
          "count": 1,
          "defines": [
            "USE_TEXTURE"
          ],
          "binding": 30
        },
        {
          "name": "texture2",
          "type": 29,
          "count": 1,
          "defines": [],
          "binding": 31
        }
      ],
      "record": null,
      "name": "EScroll|vs|fs"
    }
  ]
}