{
  "__type__": "cc.EffectAsset",
  "_name": "EGlow",
  "_objFlags": 0,
  "_native": "",
  "properties": null,
  "techniques": [
    {
      "passes": [
        {
          "blendState": {
            "targets": [
              {
                "blend": true
              }
            ]
          },
          "rasterizerState": {
            "cullMode": 0
          },
          "properties": {
            "texture": {
              "value": "white",
              "type": 29
            },
            "alphaThreshold": {
              "value": [
                0.5
              ],
              "type": 13
            },
            "glowColor": {
              "value": [
                1,
                1,
                0,
                1
              ],
              "editor": {
                "type": "color",
                "tooltip": "发光颜色（RGBA）"
              },
              "type": 16
            },
            "glowRange": {
              "value": [
                0.1
              ],
              "editor": {
                "tooltip": "内发光范围, 像素为单位"
              },
              "type": 13
            },
            "glowType": {
              "value": [
                0.1
              ],
              "editor": {
                "tooltip": "类型",
                "range": [
                  0,
                  1
                ]
              },
              "type": 13
            },
            "glowThreshold": {
              "value": [
                0.1
              ],
              "editor": {
                "tooltip": "发光阈值（只有超过这个透明度的点才会发光）",
                "range": [
                  0,
                  1
                ]
              },
              "type": 13
            },
            "textureSize": {
              "value": [
                0,
                0
              ],
              "editor": {
                "tooltip": "图片宽高"
              },
              "type": 14
            }
          },
          "program": "EGlow|vs|fs"
        }
      ]
    }
  ],
  "shaders": [
    {
      "hash": 1959753378,
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform glow {\n  vec4 glowColor;\n  vec2 textureSize;\n  float glowRange;\n  float glowType;\n  float glowThreshold;\n};\n  vec4 getTextureColor(sampler2D texture, vec2 v_uv0) {\n      if (v_uv0.x > 1.0 || v_uv0.x < 0.0 || v_uv0.y > 1.0 || v_uv0.y < 0.0) {\n          return vec4(0.0, 0.0, 0.0, 0.0);\n      }\n      return texture(texture, v_uv0);\n  }\n  float getRangeAlphaRect(bool collectOut) {\n      if (glowRange <= 0.0) {\n        return 0.0;\n      }\n      vec4 srcColor = getTextureColor(texture, v_uv0);\n      if(!collectOut) {\n        if(srcColor.a < glowThreshold) return srcColor.a;\n      }\n      float stepX = (glowRange / textureSize.x) / 6.0;\n      float stepY = (glowRange / textureSize.y) / 6.0;\n      float totalAlpha = 0.0;\n      for (float x = -6.0; x <= 6.0; x++) {\n          for (float y = -6.0; y <= 6.0; y++) {\n            float a = getTextureColor(texture, v_uv0 + vec2(x * stepX, y * stepY)).a;\n            if(a < glowThreshold) a = 0.0;\n              totalAlpha += a;\n          }\n      }\n      return totalAlpha / pow((6.0 + 6.0 + 1.0), 2.0);\n  }\n  void main () {\n      vec4 o = vec4(1, 1, 1, 1);\n      #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n      #endif\n      o *= v_color;\n      if(glowType >= 0.6) {\n          float alpha = getRangeAlphaRect(true);\n          if(alpha <= 0.0) {\n              discard;\n          }\n          if(o.a < glowThreshold) {\n            alpha = -1.0 * pow((alpha - 1.0), 4.0) + 1.0;\n            o = glowColor * alpha + o * (1.0 - alpha);\n          }else{\n            o = o * o.a + glowColor * (1.0 - o.a);\n          }\n      }else if(glowType >= 0.3) {\n          float alpha = getRangeAlphaRect(false);\n          if(alpha > glowThreshold) {\n            alpha = 1.0 - alpha;\n            alpha = -1.0 * pow((alpha - 1.0), 4.0) + 1.0;\n            o = glowColor * alpha + o * (1.0 - alpha);\n          }\n      }\n      gl_FragColor = o;\n  }"
      },
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 glowColor;\nuniform vec2 textureSize;\nuniform float glowRange;\nuniform float glowType;\nuniform float glowThreshold;\n  vec4 getTextureColor(sampler2D texture, vec2 v_uv0) {\n      if (v_uv0.x > 1.0 || v_uv0.x < 0.0 || v_uv0.y > 1.0 || v_uv0.y < 0.0) {\n          return vec4(0.0, 0.0, 0.0, 0.0);\n      }\n      return texture2D(texture, v_uv0);\n  }\n  float getRangeAlphaRect(bool collectOut) {\n      if (glowRange <= 0.0) {\n        return 0.0;\n      }\n      vec4 srcColor = getTextureColor(texture, v_uv0);\n      if(!collectOut) {\n        if(srcColor.a < glowThreshold) return srcColor.a;\n      }\n      float stepX = (glowRange / textureSize.x) / 6.0;\n      float stepY = (glowRange / textureSize.y) / 6.0;\n      float totalAlpha = 0.0;\n      for (float x = -6.0; x <= 6.0; x++) {\n          for (float y = -6.0; y <= 6.0; y++) {\n            float a = getTextureColor(texture, v_uv0 + vec2(x * stepX, y * stepY)).a;\n            if(a < glowThreshold) a = 0.0;\n              totalAlpha += a;\n          }\n      }\n      return totalAlpha / pow((6.0 + 6.0 + 1.0), 2.0);\n  }\n  void main () {\n      vec4 o = vec4(1, 1, 1, 1);\n      #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n      #endif\n      o *= v_color;\n      if(glowType >= 0.6) {\n          float alpha = getRangeAlphaRect(true);\n          if(alpha <= 0.0) {\n              discard;\n          }\n          if(o.a < glowThreshold) {\n            alpha = -1.0 * pow((alpha - 1.0), 4.0) + 1.0;\n            o = glowColor * alpha + o * (1.0 - alpha);\n          }else{\n            o = o * o.a + glowColor * (1.0 - o.a);\n          }\n      }else if(glowType >= 0.3) {\n          float alpha = getRangeAlphaRect(false);\n          if(alpha > glowThreshold) {\n            alpha = 1.0 - alpha;\n            alpha = -1.0 * pow((alpha - 1.0), 4.0) + 1.0;\n            o = glowColor * alpha + o * (1.0 - alpha);\n          }\n      }\n      gl_FragColor = o;\n  }"
      },
      "builtins": {
        "globals": {
          "blocks": [
            {
              "name": "CCGlobal",
              "defines": []
            }
          ],
          "samplers": []
        },
        "locals": {
          "blocks": [
            {
              "name": "CCLocal",
              "defines": []
            }
          ],
          "samplers": []
        }
      },
      "defines": [
        {
          "name": "USE_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_MODEL",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_ALPHA_TEST",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_ALPHA_ATLAS_texture",
          "type": "boolean",
          "defines": [
            "USE_TEXTURE"
          ]
        },
        {
          "name": "INPUT_IS_GAMMA",
          "type": "boolean",
          "defines": [
            "USE_TEXTURE"
          ]
        }
      ],
      "blocks": [
        {
          "name": "ALPHA_TEST",
          "members": [
            {
              "name": "alphaThreshold",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [
            "USE_ALPHA_TEST"
          ],
          "binding": 0
        },
        {
          "name": "glow",
          "members": [
            {
              "name": "glowColor",
              "type": 16,
              "count": 1
            },
            {
              "name": "textureSize",
              "type": 14,
              "count": 1
            },
            {
              "name": "glowRange",
              "type": 13,
              "count": 1
            },
            {
              "name": "glowType",
              "type": 13,
              "count": 1
            },
            {
              "name": "glowThreshold",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [],
          "binding": 1
        }
      ],
      "samplers": [
        {
          "name": "texture",
          "type": 29,
          "count": 1,
          "defines": [
            "USE_TEXTURE"
          ],
          "binding": 30
        }
      ],
      "record": null,
      "name": "EGlow|vs|fs"
    }
  ]
}