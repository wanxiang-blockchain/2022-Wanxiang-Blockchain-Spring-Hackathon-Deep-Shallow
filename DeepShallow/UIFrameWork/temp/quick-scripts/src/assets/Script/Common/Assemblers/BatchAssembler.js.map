{"version":3,"sources":["assets/Script/Common/Assemblers/BatchAssembler.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import BaseAssembler from \"./BaseAssembler\";\n\n/** 禁止子节点执行的FLAG */\nconst BAN_FALG = (cc.RenderFlow.FLAG_RENDER | cc.RenderFlow.FLAG_POST_RENDER);\n/** 对子节点有影响的FLAG */\nconst DIRTY_PROP = cc.RenderFlow.FLAG_OPACITY | cc.RenderFlow.FLAG_WORLD_TRANSFORM;\n/** 开关 */\nlet BATCH_SWITCH = true;\n\nexport default class BatchAssembler extends BaseAssembler {\n\n    constructor() {\n        super();\n    }\n\n    /** 分层渲染 */\n    private _groups: Array<cc.Node[]> = [];\n    /** \n     * 重写 \n     * 第一步, 让item的render方法都不执行, 只执行处理数据的方法 但是不执行fillbuffers方法\n     * 第二步, 在postFillBuffers中按照顺序, 自己调用render方法, 填充数据, 以达到合批的目的\n    **/\n    public fillBuffers(comp: cc.RenderComponent, renderer: any) {\n        if(CC_NATIVERENDERER) {\n            return ;\n        }\n        if(!BATCH_SWITCH) return ;\n        \n        // 记录当前结点是否会给孩子结点造成影响\n        let worldTransformFlag = renderer.worldMatDirty ? cc.RenderFlow.FLAG_WORLD_TRANSFORM : 0;\n        let worldOpacityFlag = renderer.parentOpacityDirty ? cc.RenderFlow.FLAG_OPACITY_COLOR : 0;\n        let dirtyFlag = worldTransformFlag | worldOpacityFlag;\n        comp.node['__DirtyFlag__'] = dirtyFlag;\n        this._groups = [];\n        this._walkByName(comp.node.children);\n    }\n\n    public postFillBuffers(comp: cc.RenderComponent, renderer: any) {\n        let originWorldMatDirty = renderer.worldMatDirty;\n        if(!BATCH_SWITCH || !this._groups || this._groups.length <= 0) return ;\n        BATCH_SWITCH = false;\n\n        for(let group of this._groups) {\n            if(group.length <= 0) continue;\n            for(let node of group) {\n                let renderFlag = node['__RenderFlag__'];\n                let dirtyFlag = node['__DirtyFlag__'];\n                renderer.worldMatDirty = dirtyFlag > 0 ? 1 : 0;\n                node._renderFlag |= renderFlag;\n\n                if(renderFlag) {\n                    cc.RenderFlow.flows[renderFlag]._func(node);\n                }\n            }\n        }\n        this._groups = null;\n        BATCH_SWITCH = true;\n        renderer.worldMatDirty = originWorldMatDirty;\n    }\n\n    /**\n     * 方案一\n     * 默认的广度遍历方式\n     * 优点: 速度较快\n     * 缺点: 新增或删除节点可能会导致合批失败\n     */\n    private _walkDefault(nodes: cc.Node[]): void {\n        if(!nodes || nodes.length <= 0) return ;\n        \n        let count = nodes[0].childrenCount;\n        let groups: cc.Node[][] = [];\n        for(let i=0; i<count; i++) {\n            groups[i] = [];\n        }        \n        let group = [];\n        for(const node of nodes) {\n            if(!node._activeInHierarchy || node.opacity == 0) continue;\n            let flag = node._renderFlag & BAN_FALG;\n            if(flag > 0) {                          // 表示这个node需要渲染\n                node['__RenderFlag__'] = flag;\n                node._renderFlag &= ~flag;          // 去掉对应的flag\n                group.push(node);\n            }             \n\n            node['__DirtyFlag__'] = node.parent['__DirtyFlag__'] | (node._renderFlag & DIRTY_PROP);\n            for(let i=0; i<count; i++) {\n                groups[i].push(node.children[i]);                \n            }\n        }\n        if(group.length > 0) {\n            this._groups.push(group);\n        }\n        for(const group of groups) {\n            this._walkDefault(group);\n        }\n    }\n\n    /**\n     * 方案二\n     * 同名结点同批次渲染\n     * 优点: 新增或删除节点不会导致合批失败\n     * 缺点: 兄弟结点不能同名,速度没方案一快,内存消耗也大\n     */\n    private _walkByName(nodes: cc.Node[]) {\n        if(!nodes || nodes.length <= 0) return ;\n        \n        let groups: {[key: string]: cc.Node[]} = {};\n        let group = [];\n        let keys: string[] = [];\n        for(const node of nodes) {\n            if(!node._activeInHierarchy || node.opacity == 0) continue;\n            let flag = node._renderFlag & BAN_FALG;\n            if(flag > 0) {                          // 表示这个node需要渲染\n                node['__RenderFlag__'] = flag;\n                node._renderFlag &= ~flag;          // 去掉对应的flag\n                group.push(node);\n            }             \n\n            node['__DirtyFlag__'] = node.parent['__DirtyFlag__'] | (node._renderFlag & DIRTY_PROP);\n\n            let lastKey = \"\";\n            for(const n of node.children) {                \n                let key = n.name;\n                if(!groups[key]) groups[key] = [];\n                groups[key].push(n);\n\n                if(keys.indexOf(key) == -1) {\n                    if(lastKey.length == 0) {           // 当前key肯定要存0号位\n                        keys.unshift(key);\n                    }else {\n                        let idx = keys.indexOf(lastKey);\n                        keys.splice(idx+1, 0, key);\n                    }\n                }\n                lastKey = key;\n            }\n        }\n        if(group.length > 0) {\n            this._groups.push(group);\n        }\n        for(const key of keys) {\n            this._walkByName(groups[key]);\n        }\n    }\n\n\n}"]}