{"version":3,"sources":["assets/Script/Common/Utils/Queue.ts"],"names":[],"mappings":";;;;;;AAAA;IAKI;QACE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IAClB,CAAC;IAED,uBAAO,GAAP,UAAQ,OAAU;QAChB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;QACjC,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;IAED,uBAAO,GAAP;QACE,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YAClB,OAAO,SAAS,CAAC;SAClB;QACD,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC5C,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACpC,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,oBAAI,GAAJ;QACE,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YAClB,OAAO,SAAS,CAAC;SAClB;QACD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACtC,CAAC;IAED,uBAAO,GAAP;QACE,OAAO,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC3B,CAAC;IAED,qBAAK,GAAL;QACE,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;IACvB,CAAC;IAED,oBAAI,GAAJ;QACE,OAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC;IACvC,CAAC;IAED,wBAAQ,GAAR;QACE,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YAClB,OAAO,EAAE,CAAC;SACX;QACD,IAAI,SAAS,GAAG,KAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAG,CAAC;QAClD,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;YACtD,SAAS,GAAM,SAAS,SAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAG,CAAC;SAC7C;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IACH,YAAC;AAAD,CAzDF,AAyDG,IAAA","file":"","sourceRoot":"/","sourcesContent":["export default class Queue<T> {\n    private count: number;\n    private lowestCount: number;\n    private items: any;\n  \n    constructor() {\n      this.count = 0;\n      this.lowestCount = 0;\n      this.items = {};\n    }\n  \n    enqueue(element: T) {\n      this.items[this.count] = element;\n      this.count++;\n    }\n  \n    dequeue() {\n      if (this.isEmpty()) {\n        return undefined;\n      }\n      const result = this.items[this.lowestCount];\n      delete this.items[this.lowestCount];\n      this.lowestCount++;\n      return result;\n    }\n  \n    peek() {\n      if (this.isEmpty()) {\n        return undefined;\n      }\n      return this.items[this.lowestCount];\n    }\n  \n    isEmpty() {\n      return this.size() === 0;\n    }\n  \n    clear() {\n      this.items = {};\n      this.count = 0;\n      this.lowestCount = 0;\n    }\n  \n    size() {\n      return this.count - this.lowestCount;\n    }\n  \n    toString() {\n      if (this.isEmpty()) {\n        return '';\n      }\n      let objString = `${this.items[this.lowestCount]}`;\n      for (let i = this.lowestCount + 1; i < this.count; i++) {\n        objString = `${objString},${this.items[i]}`;\n      }\n      return objString;\n    }\n  }"]}