{"version":3,"sources":["assets/Script/Common/Components/ScrollViewHelper.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const {ccclass, property} = cc._decorator;\n\n//help:\n//add this to the ScrollView node\n//add all data by addData function, that includes the layout of the data, we call it a \"Proxy\"\n//set onFreeUI to your free handler, put the node in pool\n//set onAllocUI to your alloc handler, instansiate the node, and refresh it.\n//enjoy, all ui will have a lazy create \n//if you call scrollTo() function with no duration, you should call checkUI(), because scrollTo with no duration will not trigger \"scrollEvents\"\n\nexport enum ScrollViewElementProxyState {\n    NoUI,\n    HaveUI\n}\n\nexport class ScrollViewElementProxy {\n    public region:cc.Rect;\n    public ui:cc.Node;\n    public src:ScrollViewElementProxy;\n    public horizontalLoop:boolean;\n    public verticalLoop:boolean;\n    public state:ScrollViewElementProxyState = ScrollViewElementProxyState.NoUI;\n}\n\n@ccclass\nexport class ScrollViewHelper extends cc.Component {\n    @property()\n    public syncInterval : number = 0.05;\n    private _proxys : ScrollViewElementProxy[] = [];\n    private _svCachedScrollView : cc.ScrollView;\n    private _rectCachedViewport : cc.Rect;\n    private _debugNode : cc.Graphics;\n    private _horizontalLoop : boolean;\n    private _syncingUI : boolean;\n    public onFreeUI:(proxy:ScrollViewElementProxy) => void;\n    public onAllocUI:(proxy:ScrollViewElementProxy) => void;\n    public isUIPooled:(proxy:ScrollViewElementProxy) => boolean;\n\n    public get scrollView() : cc.ScrollView {\n        return this._svCachedScrollView;\n    }\n    \n    public get datas() : ScrollViewElementProxy[] {\n        return this._proxys;\n    }\n\n    public clearData() {\n        for(let proxy of this._proxys) {\n            if(proxy.ui) {\n                if(this.onFreeUI) {\n                    this.onFreeUI(proxy);\n                }\n            }\n        }\n        this._proxys.length = 0;\n    }\n\n    public addData(data:ScrollViewElementProxy) {\n        this._initializeProxy(data);\n        this._proxys.push(data);\n    }\n\n    public setDebug(debug:Boolean) {\n        if(debug && !this._debugNode) {\n            this._debugNode = (new cc.Node()).addComponent(cc.Graphics);\n            this.scrollView.content.addChild(this._debugNode.node);\n            this._debugNode.node.setPosition(cc.v2(0, 0));\n        } else if(!debug && this._debugNode) {\n            this._debugNode.node.removeFromParent();\n            this._debugNode.node.destroy();\n        }\n        this._refreshDebug();\n    }\n\n    public checkUI() {\n        this._checkUIState();\n        this._syncingUI = true;\n    }\n\n    public setLoopHorizontal(loop:boolean) {\n        if(loop != this._horizontalLoop) {\n            if(loop) {\n                for(let i = this._proxys.length - 1; i >= 0 ; i--) {\n                    let target = this._proxys[i];\n                    if(!target.horizontalLoop) {\n                        //this is a original\n                        let copyed = new ScrollViewElementProxy();\n                        this._initializeProxy(copyed);\n                        copyed.src = target.src;\n                        copyed.region = new cc.Rect(target.region.x, target.region.y, target.region.width, target.region.height);\n                        copyed.horizontalLoop = true;\n                        copyed.verticalLoop = target.verticalLoop;\n                        copyed.region.x += this.scrollView.content.width;\n                        this._proxys.push(copyed);\n                    }\n                }\n                this.scrollView.content.setContentSize(this.scrollView.content.width * 2, this.scrollView.content.height);\n            } else {\n                for(let i = this._proxys.length - 1; i >= 0; i--) {\n                    let target = this._proxys[i];\n                    if(target.horizontalLoop) {\n                        if(target.ui) {\n                            this.onFreeUI(target);\n                            target.ui = null;\n                            this._proxys.splice(i, 1);\n                        }\n                    }\n                }\n                this.scrollView.content.setContentSize(this.scrollView.content.width / 2, this.scrollView.content.height);\n            }\n            this._horizontalLoop = loop;\n        }\n    }\n\n    onLoad() {\n        this._bindScrollView(this.getComponent(cc.ScrollView));\n    }\n\n    private _syncCounter : number = 0;\n    update(dt:number) {\n        if(this._syncingUI) {\n            this._syncCounter+=dt;\n            if(this._syncCounter >= this.syncInterval) {\n                this._syncCounter = 0;\n                this._syncUIState(1);\n            }\n        }\n    }\n\n    private _initializeProxy(proxy:ScrollViewElementProxy) {\n        proxy.horizontalLoop = false;\n        proxy.src = proxy;\n        proxy.state = ScrollViewElementProxyState.NoUI;\n        proxy.ui = null;\n        proxy.verticalLoop = false;\n    }\n\n    private _lastCheckX:number = 0;\n    private _checkLoopHorizontal() {\n        let offset = this.scrollView.getScrollOffset();\n        let delta = offset.x - this._lastCheckX;\n        if(Math.abs(delta) > 2) {\n            this._lastCheckX = offset.x;\n            let originalWidth = this.scrollView.content.width / 2;\n            //check move whole content\n            if(delta < 0 && offset.x < -originalWidth) {\n                offset.x += originalWidth;\n                this._lastCheckX = offset.x;\n                offset.x = -offset.x;\n                this.scrollView.scrollToOffset(offset);\n            } else if(delta > 0 && offset.x > 0) {\n                offset.x -= originalWidth;\n                this._lastCheckX = offset.x;\n                offset.x = -offset.x;\n                this.scrollView.scrollToOffset(offset);\n            }\n        }\n    }\n\n    private _bindScrollView(view:cc.ScrollView) {\n        this._svCachedScrollView = this.getComponent(cc.ScrollView);\n        let eventHandler = new cc.Component.EventHandler();\n        eventHandler.target = this.node;\n        eventHandler.component = \"ScrollViewHelper\";\n        eventHandler.handler = \"_onScroll\";\n        this._svCachedScrollView.scrollEvents.push(eventHandler);\n        this._svCachedScrollView.node.on(cc.Node.EventType.SIZE_CHANGED, this._refreshViewportRect, this);\n        this._svCachedScrollView.content.on(cc.Node.EventType.ANCHOR_CHANGED, this._refreshViewportRect, this);\n        this._svCachedScrollView.content.on(cc.Node.EventType.SIZE_CHANGED, this._refreshViewportRect, this);\n        this._refreshViewportRect();\n    }\n\n    private _refreshViewportRect() {\n        this._rectCachedViewport = cc.rect();\n        this._rectCachedViewport.size = this._svCachedScrollView.node.getContentSize();\n        this._rectCachedViewport.origin = cc.v2(-this._svCachedScrollView.content.anchorX * this._svCachedScrollView.content.width, \n            (1 - this._svCachedScrollView.content.anchorY) * this._svCachedScrollView.content.height - this._rectCachedViewport.size.height);\n        this._checkUIState();\n        this._syncingUI = true;\n    }\n    \n    private _checkUIState() {\n        let delta = this._svCachedScrollView.getScrollOffset();\n        let viewWidth = this._rectCachedViewport.width;\n        let viewHeight = this._rectCachedViewport.height;\n        let viewX = -delta.x + this._rectCachedViewport.x;\n        let viewY = -delta.y + this._rectCachedViewport.y;\n        for(let proxy of this._proxys) {\n            let rect = proxy.region;\n            let x = rect.x;\n            let y = rect.y;\n            if(x > viewX - rect.width && x < viewX + viewWidth &&\n                y > viewY - rect.height && y < viewY + viewHeight) {\n                proxy.state = ScrollViewElementProxyState.HaveUI;\n            } else {\n                proxy.state = ScrollViewElementProxyState.NoUI;\n            }\n        }\n    }\n\n    private _syncUIState(maxAllocCount:number) {\n        let changeCount : number = 0;\n        for(let proxy of this._proxys) {\n            if(proxy.state == ScrollViewElementProxyState.NoUI && proxy.ui) {\n                this.onFreeUI(proxy);\n                changeCount ++;\n                if(this._debugNode) {\n                    cc.log(\"ScrollViewHelper._syncUIState ----> free ui\");\n                }\n            }\n        }\n        for(let proxy of this._proxys) {\n            if(proxy.state == ScrollViewElementProxyState.HaveUI && !proxy.ui) {\n                let pooled = this.isUIPooled && this.isUIPooled(proxy);\n                this.onAllocUI(proxy);\n                changeCount++;\n                if(!pooled) {               //real alloc should be limited\n                    maxAllocCount--;\n                }\n                if(this._debugNode) {\n                    cc.log(\"ScrollViewHelper._syncUIState ----> alloc ui\");\n                }\n            }\n            if(maxAllocCount <= 0) {\n                break;\n            }\n        }\n        if(changeCount <= 0) {\n            //everything is changed\n            this._syncingUI = false;\n        }\n    }\n\n    private _onScroll() {\n        if(this._horizontalLoop) {\n            this._checkLoopHorizontal();\n        }\n        this._checkUIState();\n        this._syncingUI = true;\n    }\n\n    private _refreshDebug() {\n        if(this._debugNode) {\n            this._debugNode.clear();\n            this._debugNode.fillColor = cc.color(255, 0, 0, 255);\n            for(let i = 0; i < this._proxys.length; i++) {\n                this._debugNode.fillRect(this._proxys[i].region.x, this._proxys[i].region.y, this._proxys[i].region.width, this._proxys[i].region.height);\n            }\n        }\n    }\n}"]}