{"version":3,"sources":["assets/Script/Common/Assemblers/MeshAssembler.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import MeshTexture from \"../Components/MeshTexture\";\n\nconst gfx = cc['gfx'];\n\n// 顶点格式 -> 位置 UV, 颜色\nlet vfmtPosUvColor = new gfx.VertexFormat([\n    { name: gfx.ATTR_POSITION, type: gfx.ATTR_TYPE_FLOAT32, num: 2 },\n    { name: gfx.ATTR_UV0, type: gfx.ATTR_TYPE_FLOAT32, num: 2 },\n    { name: gfx.ATTR_COLOR, type: gfx.ATTR_TYPE_UINT8, num: 4, normalize: true },\n]);\n\nexport default class MeshAssembler extends cc.Assembler{\n\n    constructor() {\n        super();\n        this._renderData = new cc.RenderData();\n        this._renderData.init(this);\n\n        this.initData();\n        this.initLocal();\n    }\n\n    private row = 0;                // 行数\n    private col = 0;                // 列数\n    private _realRow = 0;           // 实际行数\n    private _realCol = 0;           // 实际列数\n    private stepRow = 0;            // 步长\n    private StepCol = 0;            // 步长\n    private verticesCount = 4;\n    private indicesCount = 6;\n\n\n    floatsPerVert = 5;\n    uvOffset = 2;       \n    colorOffset = 4;\n\n    private _renderData: cc.RenderData = null;\n    private _local: number[] = null;\n\n    get verticesFloats() {\n        return this.verticesCount * this.floatsPerVert;\n    }\n\n    /** 获得三角形片段的数量 */\n    public getTriangleCount() {\n        return (this.row-1) * (this.col - 1) * 2;\n    }\n\n    public getTriangle(idx: number) {\n        if(idx < 0 || idx >= this.getTriangleCount()) return null;\n        let verts = this._renderData.vDatas[0] as Array<number>;\n        let vertIdx = Math.floor(idx / this._realCol) * this._realCol * 2 + idx;\n        let arr: cc.Vec2[] = [];\n        if(idx % 2 == 0) {\n            arr = [\n                cc.v2(verts[vertIdx * this.floatsPerVert], verts[vertIdx * this.floatsPerVert+1]),\n                cc.v2(verts[(vertIdx + 1) * this.floatsPerVert], verts[(vertIdx + 1) * this.floatsPerVert+1]),\n                cc.v2(verts[(vertIdx + this._realCol) * this.floatsPerVert], verts[(vertIdx + this._realCol) * this.floatsPerVert+1]),\n            ]\n        }else {\n            arr = [\n                cc.v2(verts[vertIdx * this.floatsPerVert], verts[vertIdx * this.floatsPerVert+1]),\n                cc.v2(verts[(vertIdx + this._realCol) * this.floatsPerVert], verts[(vertIdx + this._realCol) * this.floatsPerVert+1]),\n                cc.v2(verts[(vertIdx + this._realCol-1) * this.floatsPerVert], verts[(vertIdx + this._realCol-1) * this.floatsPerVert+1]),                \n            ]\n        }\n        return arr;\n    }\n\n    public setTriangle(idx: number, arr: cc.Vec2[], comp: any) {\n        if(idx < 0 || idx >= this.getTriangleCount()) return ;\n        let verts = this._renderData.vDatas[0] as Array<number>;\n        let vertIdx = Math.floor(idx / this._realCol) * this._realCol * 2 + idx;\n        \n        if(idx % 2 == 0) {\n            verts[vertIdx * this.floatsPerVert] = arr[0].x;\n            verts[vertIdx * this.floatsPerVert+1] = arr[0].y;\n\n            verts[(vertIdx + 1) * this.floatsPerVert] = arr[1].x;\n            verts[(vertIdx + 1) * this.floatsPerVert+1] = arr[1].y;\n\n            verts[(vertIdx + this._realCol) * this.floatsPerVert] = arr[2].x;\n            verts[(vertIdx + this._realCol) * this.floatsPerVert+1] = arr[2].y;\n\n        }else {\n            verts[vertIdx * this.floatsPerVert] = arr[0].x;\n            verts[vertIdx * this.floatsPerVert+1] = arr[0].y;\n\n            verts[(vertIdx + this._realCol) * this.floatsPerVert] = arr[1].x;\n            verts[(vertIdx + this._realCol) * this.floatsPerVert+1] = arr[1].y;\n\n            verts[(vertIdx + this._realCol-1) * this.floatsPerVert] = arr[2].x;\n            verts[(vertIdx + this._realCol-1) * this.floatsPerVert+1] = arr[2].y;\n        }\n\n        comp._vertsDirty = true;\n    }\n\n    public getRectCount() {\n        return (this.row-1) * (this.col - 1);\n    }\n    public getRect(idx: number) {\n        if(idx < 0 || idx >= this.getRectCount()) return null;\n        let verts = this._renderData.vDatas[0] as Array<number>;\n        let vertIdx = Math.floor(idx*2 / this._realCol) * this._realCol * 2 + (idx * 2 % this._realCol);\n\n        let arr: cc.Vec2[] = [\n            cc.v2(verts[vertIdx * this.floatsPerVert], verts[vertIdx * this.floatsPerVert+1]),\n            cc.v2(verts[(vertIdx + 1) * this.floatsPerVert], verts[(vertIdx + 1) * this.floatsPerVert+1]),\n            cc.v2(verts[(vertIdx + this._realCol) * this.floatsPerVert], verts[(vertIdx + this._realCol) * this.floatsPerVert+1]),\n            cc.v2(verts[(vertIdx + this._realCol+1) * this.floatsPerVert], verts[(vertIdx + this._realCol+1) * this.floatsPerVert+1]),                \n        ];\n        return arr;\n    }\n    public setRect(idx: number, arr: cc.Vec2[]) {\n        if(idx < 0 || idx >= this.getRectCount()) return ;\n        let verts = this._renderData.vDatas[0] as Array<number>;\n        let vertIdx = Math.floor((idx * 2) / this._realCol) * this._realCol * 2 + (idx * 2 % this._realCol);\n        \n        verts[vertIdx * this.floatsPerVert] = arr[0].x;\n        verts[vertIdx * this.floatsPerVert+1] = arr[0].y;\n\n        verts[(vertIdx + 1) * this.floatsPerVert] = arr[1].x;\n        verts[(vertIdx + 1) * this.floatsPerVert+1] = arr[1].y;\n\n        verts[(vertIdx + this._realCol) * this.floatsPerVert] = arr[2].x;\n        verts[(vertIdx + this._realCol) * this.floatsPerVert+1] = arr[2].y;\n\n        verts[(vertIdx + this._realCol+1) * this.floatsPerVert] = arr[3].x;\n        verts[(vertIdx + this._realCol+1) * this.floatsPerVert+1] = arr[3].y;\n    }\n\n    public resetData(comp: MeshTexture) {\n        if(!comp.texture) return ;\n        let width = comp.texture.width;\n        let height = comp.texture.height;\n        let step = comp.step;\n        this.row = Math.floor(height / step) + 1;\n        this.col = Math.floor(width / step) + 1;\n        this.stepRow = height / (this.row-1);\n        this.StepCol = width / (this.col - 1);\n\n        this._realRow = 2 + (this.row - 2) * 2;\n        this._realCol = 2 + (this.col - 2) * 2;\n\n        cc.log(this.row, this.col);\n\n        this.verticesCount = this._realRow * this._realCol;\n        this.indicesCount = (this.row-1) * (this.col - 1) * 6;\n        this._renderData['clear']();\n        this.initData();\n    }\n\n    public getVfmt() {\n        return vfmtPosUvColor;\n    }\n    public getBuffer() {\n        return cc.renderer['_handle'].getBuffer('mesh', this.getVfmt());\n    }\n\n    public initData() {\n        let data = this._renderData;\n        data.createQuadData(0, this.verticesFloats, this.indicesCount);\n\n        let indices = this._renderData.iDatas[0];\n        let indexOffset = 0;\n        for (let r = 0; r < this.row-1; ++r) {\n            for (let c = 0; c < this.col-1; ++c) {\n                let start = r * 2 * this._realCol + c * 2;\n                indices[indexOffset++] = start;\n                indices[indexOffset++] = start + 1;\n                indices[indexOffset++] = start + this._realCol;\n                indices[indexOffset++] = start + 1;\n                indices[indexOffset++] = start + this._realCol+1;\n                indices[indexOffset++] = start + this._realCol;\n            }\n        }\n    }\n    public initLocal() {\n        this._local = [];\n        this._local.length = 4;\n    }\n\n    /** 填充顶点的color */\n    public updateColor(comp: cc.RenderComponent, color: number) {\n        let uintVerts = this._renderData.uintVDatas[0];\n        if(!uintVerts) return ;\n        color = color != null ? color : comp.node.color['_val'];\n        let floatsPerVert = this.floatsPerVert;\n        let colorOffset = this.colorOffset;\n        for(let i=0; i<this.verticesCount; i++) {\n            uintVerts[colorOffset + i * floatsPerVert] = color;\n        }\n    }\n    /** 更新uv */\n    protected updateUVs(comp: cc.RenderComponent) {\n        let uvOffset = this.uvOffset;\n        let floatsPerVert = this.floatsPerVert;\n        let verts = this._renderData.vDatas[0];\n        let vid = 0;\n\n        let _setUv = (uv_x: number, uv_y: number, vid: number) => {\n            let voffset = vid * floatsPerVert;\n            verts[voffset + uvOffset] = uv_x;\n            verts[voffset + uvOffset + 1] = uv_y;\n        }\n        let _fillOneRow = (uv_y: number) => {\n            for(let col=0; col<this.col; col++) {\n                let uv_x = col/(this.col-1);\n                _setUv(uv_x, uv_y, vid++);\n                if(col !== 0 && col !== this.col-1) {\n                    _setUv(uv_x, uv_y, vid++);\n                }\n            }\n        }\n        for(let row=0; row<this.row; row++) {\n            let uv_y = 1-row/(this.row-1);\n            _fillOneRow(uv_y);\n            if(row !== 0 && row !== this.row-1) {\n                _fillOneRow(uv_y);\n            }\n        }\n        \n    }\n\n    protected updateWorldVertsWebGL(comp: cc.RenderComponent) {\n        let local = this._local;\n        let verts = this._renderData.vDatas[0];\n\n        let matrix: cc.Mat4 = comp.node['_worldMatrix'];\n        let matrixm = matrix.m,\n        a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5], \n        tx = matrixm[12], ty = matrixm[13];\n\n        let vl = local[0], vr = local[2],                                                                                    \n        vb = local[1], vt = local[3];\n\n        let justTranslate = a === 1 && b === 0 && c === 0 && d === 1;\n        let floatsPerVert = this.floatsPerVert;\n        let vertIdx = 0;\n        \n        let _setVert = (localColX: number, localRowY: number, vertIdx: number) => {\n            let worldIndex = floatsPerVert * vertIdx;\n            verts[worldIndex] = localColX + tx;\n            verts[worldIndex + 1] = localRowY + ty;\n        }\n\n        let _setVert2 = (localColX: number, localRowY: number, vertIdx: number) => {\n            let worldIndex = vertIdx * floatsPerVert;\n            verts[worldIndex] = localColX * a + localRowY * c + tx;\n            verts[worldIndex + 1] = localColX * b + localRowY * d + ty;\n        }\n\n        let _fillOneRow = (localRowY: number, setVert: Function) => {\n            for(let col=0; col<this.col; col++) {\n                let localColX = (col == this.col-1) ? vr : (vl + col * this.StepCol);\n                setVert(localColX, localRowY, vertIdx ++);\n                if(col !== 0 && col !== this.col-1) {\n                    // 插入一列\n                    setVert(localColX, localRowY, vertIdx ++);\n                }\n            }\n        }\n\n        if(justTranslate) {\n            for(let row=0; row<this.row; row++) {\n                let localRowY = (row == this.row-1) ? vt : (vb + row * this.stepRow);\n                _fillOneRow(localRowY, _setVert);\n                if(row !== 0 && row !== this.row-1) {\n                    // 插入一行\n                    _fillOneRow(localRowY, _setVert);\n                }\n            }\n        }else {\n            for(let row=0; row<this.row; row++) {\n                let localRowY = (row == this.row-1) ? vt : (vb + row * this.stepRow);\n                _fillOneRow(localRowY, _setVert2);\n                if(row !== 0 && row !== this.row-1) {\n                    // 插入一行\n                    _fillOneRow(localRowY, _setVert2);\n                }\n            }\n        }\n    }\n\n    protected updateWorldVertsNative(comp: cc.RenderComponent) {\n        let local = this._local;\n        let verts = this._renderData.vDatas[0];\n        let floatsPerVert = this.floatsPerVert;\n      \n        let vl = local[0],\n            vr = local[2],\n            vb = local[1],\n            vt = local[3];\n      \n        let index: number = 0;\n        // left bottom\n        verts[index] = vl;\n        verts[index+1] = vb;\n        index += floatsPerVert;\n        // right bottom\n        verts[index] = vr;\n        verts[index+1] = vb;\n        index += floatsPerVert;\n        // left top\n        verts[index] = vl;\n        verts[index+1] = vt;\n        index += floatsPerVert;\n        // right top\n        verts[index] = vr;\n        verts[index+1] = vt;\n    }\n\n    protected updateWorldVerts(comp: cc.RenderComponent) {\n        if (CC_NATIVERENDERER) {\n            this.updateWorldVertsNative(comp);\n        } else {\n            this.updateWorldVertsWebGL(comp);\n        }\n    }\n\n    /** 更新顶点数据 */\n    protected updateVerts(comp: cc.RenderComponent) {\n        let node: cc.Node = comp.node,\n            cw: number = node.width,\n            ch: number = node.height,\n            appx: number = node.anchorX * cw,\n            appy: number = node.anchorY * ch,\n            l: number,\n            b: number, \n            r: number,\n            t: number;\n\n        l = - appx;\n        b = - appy;\n        r = cw - appx;\n        t = ch - appy;\n\n        let local = this._local;\n        local[0] = l;\n        local[1] = b;\n        local[2] = r;\n        local[3] = t;\n        this.updateWorldVerts(comp);\n    }\n\n    /** 更新renderdata */\n    protected updateRenderData(comp: MeshTexture) {\n        if (comp._vertsDirty) {\n            this.resetData(comp);\n            this.updateUVs(comp);\n            this.updateVerts(comp);\n            comp._vertsDirty = false;\n        }\n    } \n\n    fillBuffers(comp: cc.RenderComponent, renderer) {\n        if (renderer.worldMatDirty) {\n            this.updateWorldVerts(comp);\n        }\n\n        let renderData = this._renderData;\n\n        // vData里包含 pos， uv， color数据， iData中包含顶点索引\n        let vData = renderData.vDatas[0];\n        let iData = renderData.iDatas[0];\n\n        let buffer = this.getBuffer();\n        let offsetInfo = buffer.request(this.verticesCount, this.indicesCount);\n\n        // buffer data may be realloc, need get reference after request.\n\n        // fill vertices\n        let vertexOffset = offsetInfo.byteOffset >> 2,\n            vbuf = buffer._vData;\n        if (vData.length + vertexOffset > vbuf.length) {\n            vbuf.set(vData.subarray(0, vbuf.length - vertexOffset), vertexOffset);\n        } else {\n            vbuf.set(vData, vertexOffset);\n        }\n\n        // fill indices\n        let ibuf = buffer._iData,\n            indiceOffset = offsetInfo.indiceOffset,\n            vertexId = offsetInfo.vertexOffset;\n        for (let i = 0, l = iData.length; i < l; i++) {\n            ibuf[indiceOffset++] = vertexId + iData[i];\n        }\n    }\n\n    packToDynamicAtlas(comp, frame) {\n        if (CC_TEST) return;\n        \n        if (!frame._original && cc.dynamicAtlasManager && frame._texture.packable) {\n            let packedFrame = cc.dynamicAtlasManager.insertSpriteFrame(frame);            \n            //@ts-ignore\n            if (packedFrame) {\n                frame._setDynamicAtlasFrame(packedFrame);\n            }\n        }\n        let material = comp._materials[0];\n        if (!material) return;\n        \n        if (material.getProperty('texture') !== frame._texture) {\n            // texture was packed to dynamic atlas, should update uvs\n            comp._vertsDirty = true;\n            comp._updateMaterial();\n        }\n    }\n    \n}   "]}