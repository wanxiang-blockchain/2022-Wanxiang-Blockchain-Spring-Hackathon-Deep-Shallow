{"version":3,"sources":["assets/Script/Common/Assemblers/BaseAssembler.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const gfx = cc['gfx'];\n\n// 顶点格式 -> 位置 UV, 颜色\nlet vfmtPosUvColor = new gfx.VertexFormat([\n    { name: gfx.ATTR_POSITION, type: gfx.ATTR_TYPE_FLOAT32, num: 2 },\n    { name: gfx.ATTR_UV0, type: gfx.ATTR_TYPE_FLOAT32, num: 2 },\n    { name: gfx.ATTR_COLOR, type: gfx.ATTR_TYPE_UINT8, num: 4, normalize: true },\n]);\n/**\n * assembler for texture\n */\nexport default class BaseAssembler extends cc.Assembler {\n    constructor() {\n        super();\n        this._renderData = new cc.RenderData();\n        this._renderData.init(this);\n\n        this.initData();\n        this.initLocal();\n    }\n    verticesCount = 4;\n    indicesCount = 6;\n    floatsPerVert = 5;\n    uvOffset = 2;       \n    colorOffset = 4;\n\n    private _renderData: cc.RenderData = null;\n    private _local: number[] = null;\n\n    get verticesFloats() {\n        return this.verticesCount * this.floatsPerVert;\n    }\n\n    public getVfmt() {\n        return vfmtPosUvColor;\n    }\n    public getBuffer() {\n        return cc.renderer['_handle'].getBuffer('mesh', this.getVfmt());\n    }\n\n    public initData() {\n        let data = this._renderData;\n        data.createQuadData(0, this.verticesFloats, this.indicesCount);\n    }\n    public initLocal() {\n        this._local = [];\n        this._local.length = 4;\n    }\n\n    /** 填充顶点的color */\n    public updateColor(comp: cc.RenderComponent, color: number) {\n        let uintVerts = this._renderData.uintVDatas[0];\n        if(!uintVerts) return ;\n        color = color != null ? color : comp.node.color['_val'];\n        let floatsPerVert = this.floatsPerVert;\n        let colorOffset = this.colorOffset;\n        for(let i=0; i<this.verticesCount; i++) {\n            uintVerts[colorOffset + i * floatsPerVert] = color;\n        }\n    }\n    /** 更新uv */\n    protected updateUVs(comp: cc.RenderComponent) {\n        // 对应的是 l, b, r, b, l, t, r, t 既左下， 右下， 左上， 右上\n        let uv = [0, 1, 1, 1, 0, 0, 1, 0];\n        let uvOffset = this.uvOffset;\n        let floatsPerVert = this.floatsPerVert;\n        let verts = this._renderData.vDatas[0];\n        // 填充render data中4个顶点的uv部分\n        for (let i = 0; i < this.verticesCount; i++) {\n            let srcOffset = i * 2;\n            let dstOffset = floatsPerVert * i + uvOffset;\n            verts[dstOffset] = uv[srcOffset];           // 设置 u\n            verts[dstOffset + 1] = uv[srcOffset + 1];   // 设置 v\n        }\n    }\n\n    protected updateWorldVertsWebGL(comp: cc.RenderComponent) {\n        let local = this._local;\n        let verts = this._renderData.vDatas[0];\n\n        let matrix: cc.Mat4 = comp.node['_worldMatrix'];\n        let matrixm = matrix.m,\n        a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5], \n        tx = matrixm[12], ty = matrixm[13];\n\n        let vl = local[0], vr = local[2],\n        vb = local[1], vt = local[3];\n\n        let justTranslate = a === 1 && b === 0 && c === 0 && d === 1;\n        let index = 0;\n        let floatsPerVert = this.floatsPerVert;\n        if (justTranslate) {\n            // left bottom\n            verts[index] = vl + tx;     // 顶点位置 x = 世界坐标left + x的偏移量\n            verts[index+1] = vb + ty;   // 顶点位置 y\n            index += floatsPerVert;\n            // right bottom\n            verts[index] = vr + tx;\n            verts[index+1] = vb + ty;\n            index += floatsPerVert;\n            // right top\n            verts[index] = vr + tx;\n            verts[index+1] = vt + ty;\n            index += floatsPerVert;\n            // left top\n            verts[index] = vl + tx;\n            verts[index+1] = vt + ty;\n            index += floatsPerVert;\n        } else {\n            // 4对xy分别乘以 [2,2]仿射矩阵，然后+平移量\n            let al = a * vl, ar = a * vr,\n            bl = b * vl, br = b * vr,\n            cb = c * vb, ct = c * vt,\n            db = d * vb, dt = d * vt;\n\n            // left bottom\n            verts[index] = al + cb + tx;\n            verts[index+1] = bl + db + ty;\n            index += floatsPerVert;\n            // right bottom\n            verts[index] = ar + cb + tx;\n            verts[index+1] = br + db + ty;\n            index += floatsPerVert;\n            // left top\n            verts[index] = al + ct + tx;\n            verts[index+1] = bl + dt + ty;\n            index += floatsPerVert;\n            // right top\n            verts[index] = ar + ct + tx;\n            verts[index+1] = br + dt + ty;\n        }\n    }\n\n    protected updateWorldVertsNative(comp: cc.RenderComponent) {\n        let local = this._local;\n        let verts = this._renderData.vDatas[0];\n        let floatsPerVert = this.floatsPerVert;\n      \n        let vl = local[0],\n            vr = local[2],\n            vb = local[1],\n            vt = local[3];\n      \n        let index: number = 0;\n        // left bottom\n        verts[index] = vl;\n        verts[index+1] = vb;\n        index += floatsPerVert;\n        // right bottom\n        verts[index] = vr;\n        verts[index+1] = vb;\n        index += floatsPerVert;\n        // left top\n        verts[index] = vl;\n        verts[index+1] = vt;\n        index += floatsPerVert;\n        // right top\n        verts[index] = vr;\n        verts[index+1] = vt;\n    }\n\n    protected updateWorldVerts(comp: cc.RenderComponent) {\n        if (CC_NATIVERENDERER) {\n            this.updateWorldVertsNative(comp);\n        } else {\n            this.updateWorldVertsWebGL(comp);\n        }\n    }\n\n    /** 更新顶点数据 */\n    protected updateVerts(comp: cc.RenderComponent) {\n        let node: cc.Node = comp.node,\n            cw: number = node.width,\n            ch: number = node.height,\n            appx: number = node.anchorX * cw,\n            appy: number = node.anchorY * ch,\n            l: number,\n            b: number, \n            r: number,\n            t: number;\n\n        l = - appx;\n        b = - appy;\n        r = cw - appx;\n        t = ch - appy;\n\n        let local = this._local;\n        local[0] = l;\n        local[1] = b;\n        local[2] = r;\n        local[3] = t;\n        this.updateWorldVerts(comp);\n    }\n\n    /** 更新renderdata */\n    protected updateRenderData(comp: cc.RenderComponent) {\n        if (comp._vertsDirty) {\n            this.updateUVs(comp);\n            this.updateVerts(comp);\n            comp._vertsDirty = false;\n        }\n    } \n\n    fillBuffers(comp: cc.RenderComponent, renderer) {\n        if (renderer.worldMatDirty) {\n            this.updateWorldVerts(comp);\n        }\n\n        let renderData = this._renderData;\n\n        // vData里包含 pos， uv， color数据， iData中包含顶点索引\n        let vData = renderData.vDatas[0];\n        let iData = renderData.iDatas[0];\n\n        let buffer = this.getBuffer();\n        let offsetInfo = buffer.request(this.verticesCount, this.indicesCount);\n\n        // buffer data may be realloc, need get reference after request.\n\n        // fill vertices\n        let vertexOffset = offsetInfo.byteOffset >> 2,\n            vbuf = buffer._vData;\n\n        if (vData.length + vertexOffset > vbuf.length) {\n            vbuf.set(vData.subarray(0, vbuf.length - vertexOffset), vertexOffset);\n        } else {\n            vbuf.set(vData, vertexOffset);\n        }\n\n        // fill indices\n        let ibuf = buffer._iData,\n            indiceOffset = offsetInfo.indiceOffset,\n            vertexId = offsetInfo.vertexOffset;             // vertexId是已经在buffer里的顶点数，也是当前顶点序号的基数\n            let textData = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6 ,7];\n        for (let i = 0, l = iData.length; i < l; i++) {\n            ibuf[indiceOffset++] = vertexId + textData[i];\n        }\n\n\n    }\n\n    packToDynamicAtlas(comp, frame) {\n        if (CC_TEST) return;\n        \n        if (!frame._original && cc.dynamicAtlasManager && frame._texture.packable) {\n            let packedFrame = cc.dynamicAtlasManager.insertSpriteFrame(frame);            \n            if (packedFrame) {\n                frame._setDynamicAtlasFrame(packedFrame);\n            }\n        }\n        let material = comp._materials[0];\n        if (!material) return;\n        \n        if (material.getProperty('texture') !== frame._texture) {\n            // texture was packed to dynamic atlas, should update uvs\n            comp._vertsDirty = true;\n            comp._updateMaterial();\n        }\n    }\n\n}"]}