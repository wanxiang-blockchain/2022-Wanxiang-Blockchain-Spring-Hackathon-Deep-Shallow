{"version":3,"sources":["assets/Script/Common/Components/QuadTree.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["export class Bound {\n    uid?: string;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n\n    constructor(x: number, y: number, width: number, height: number, uid = \"\") {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.uid = uid;\n    }\n}\n/**\n * 四叉树\n */\nexport default class Quadtree {\n    private _maxObject = 10;\n    private _maxLevel = 4;\n    private _level = 0;\n    private _bound: Bound = null;\n    private _objects: Bound[] = [];\n    private _nodes: Quadtree[] = [];\n    \n    constructor(bound: Bound, maxObjects?: number, maxLevels?: number, level?: number) {\n        this._bound = bound;\n        this._maxObject = maxObjects || this._maxObject;\n        this._maxLevel = maxLevels || this._maxLevel;\n        this._level = level || this._level;\n    }\n\n    /** 切 */\n    public split() {\n        let nextLevel   = this._level + 1;\n        let subWidth    = this._bound.width/2;\n        let subHeight   = this._bound.height/2;\n        let x           = this._bound.x;\n        let y           = this._bound.y;\n \n        //top right node\n        this._nodes[0] = new Quadtree({\n            uid: `${nextLevel}-top-right`,\n            x: x+subWidth,\n            y: y, \n            width: subWidth,\n            height: subHeight\n        }, this._maxObject, this._maxLevel, nextLevel);\n        \n        //top left node\n        this._nodes[1] = new Quadtree({\n            uid: `${nextLevel}-top-left`,\n            x: x,\n            y: y,\n            width: subWidth,\n            height: subHeight\n        }, this._maxObject, this._maxLevel, nextLevel);\n        \n        //bottom left node\n        this._nodes[2] = new Quadtree({\n            uid: `${nextLevel}-bottom-left`,\n            x: x,\n            y: y+subHeight,\n            width: subWidth,\n            height: subHeight\n        }, this._maxObject, this._maxLevel, nextLevel);\n        \n        //bottom right node\n        this._nodes[3] = new Quadtree({\n            uid: `${nextLevel}-bottom-right`,\n            x: x + subWidth,\n            y: y+subHeight,\n            width: subWidth,\n            height: subHeight\n        }, this._maxObject, this._maxLevel, nextLevel);\n    }\n\n    /**  */\n    public getIndex(bound: Bound) {\n        let indexes: number[] = [],\n        verticalMidpoint    = this._bound.x + (this._bound.width/2),\n        horizontalMidpoint  = this._bound.y + (this._bound.height/2);    \n\n        let startIsNorth = bound.y < horizontalMidpoint,\n            startIsWest  = bound.x < verticalMidpoint,\n            endIsEast    = bound.x + bound.width > verticalMidpoint,\n            endIsSouth   = bound.y + bound.height > horizontalMidpoint;    \n\n        //top-right quad\n        if(startIsNorth && endIsEast) {\n            indexes.push(0);\n        }\n        \n        //top-left quad\n        if(startIsWest && startIsNorth) {\n            indexes.push(1);\n        }\n\n        //bottom-left quad\n        if(startIsWest && endIsSouth) {\n            indexes.push(2);\n        }\n\n        //bottom-right quad\n        if(endIsEast && endIsSouth) {\n            indexes.push(3);\n        }\n    \n        return indexes;\n    }\n\n    /** 插入一个bound */\n    public insert(bound: Bound) {\n        let i = 0;\n        let indexes: number[] = [];\n         \n        //if we have subnodes, call insert on matching subnodes\n        if(this._nodes.length) {\n            indexes = this.getIndex(bound);\n     \n            for(i=0; i<indexes.length; i++) {\n                this._nodes[indexes[i]].insert(bound);     \n            }\n            return;\n        }\n     \n        //otherwise, store object here\n        this._objects.push(bound);\n\n        //max_objects reached\n        if(this._objects.length > this._maxObject && this._level < this._maxLevel) {\n\n            //split if we don't already have subnodes\n            if(!this._nodes.length) {\n                this.split();\n            }\n            \n            //add all objects to their corresponding subnode\n            for(i=0; i<this._objects.length; i++) {\n                indexes = this.getIndex(this._objects[i]);\n                for(let k=0; k<indexes.length; k++) {\n                    this._nodes[indexes[k]].insert(this._objects[i]);\n                }\n            }\n\n            //clean up this node\n            this._objects = [];\n        }\n    }\n\n    public retrieve(bound: Bound): Bound[] {\n         \n        let indexes = this.getIndex(bound),\n            returnObjects = this._objects;\n            \n        //if we have subnodes, retrieve their objects\n        if(this._nodes.length) {\n            for(let i=0; i<indexes.length; i++) {\n                returnObjects = returnObjects.concat(this._nodes[indexes[i]].retrieve(bound));\n            }\n        }\n\n        //remove duplicates\n        returnObjects = returnObjects.filter(function(item, index) {\n            return returnObjects.indexOf(item) >= index;\n        });\n     \n        return returnObjects;\n    }\n\n    public clear() {\n        this._objects = [];\n        for(let i=0; i < this._nodes.length; i++) {\n            if(this._nodes.length) {\n                this._nodes[i].clear();\n              }\n        }\n        this._nodes = [];\n    }\n}"]}