{"version":3,"sources":["assets/Script/Common/Utils/BigNumUtils.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["export const enum RountType{\n    Round,\n    Floor,\n    Ceil,\n}\ndeclare type BigNumber = number | string;\nexport default class BigNumUtils {\n    public static BNPlus(...args: any[]) {\n        var value = [0, 0];\n        for (var _i = 0; _i < args.length; _i++) {\n            var arg = args[_i];\n            var base, zeroes;\n            var num = +arg;\n            if (num === 0 || (num && num !== Infinity)) {\n                zeroes = arg < 10 ? 0 : Math.floor(Math.log10(+arg) + 1e-6);\n                base = arg < 10 ? arg : arg / Math.pow(10, zeroes);\n            }\n            else {\n                if (arg) {\n                    arg = arg.split(\"e\");\n                    base = +arg[0] || 0;\n                    zeroes = +arg[1] || 0;\n                }\n                else {\n                    base = 0;\n                    zeroes = 0;\n                }\n            }\n            if (zeroes > value[1]) {\n                value[0] /= Math.pow(10, zeroes - value[1]);\n                value[0] += base;\n                value[1] = zeroes;\n            }\n            else {\n                value[0] += base / Math.pow(10, value[1] - zeroes);\n            }\n        }\n        let sign = value[0] >= 0 ? 1 : -1; \n        let rbase = Math.abs(value[0]);\n        while (rbase < 1 && value[1] > 0) {\n            rbase *= 10;\n            value[1] -= 1;\n        }\n        while (rbase > 10) {\n            rbase /= 10;\n            value[1] += 1;\n        }\n        rbase *= sign;\n        return `${rbase}e${value[1]}`;\n    }\n    public static BNMinus(...args: any[]):BigNumber {\n        var value = [0, 0];\n        for (var _i = 0; _i < args.length; _i++) {\n            var arg = args[_i];\n            var idx = _i;\n            var base, zeroes;\n            var num = +arg;\n            if (num === 0 || (num && num !== Infinity)) {\n                zeroes = arg < 10 ? 0 : Math.floor(Math.log10(+arg) + 1e-6);\n                base = arg < 10 ? arg : arg / Math.pow(10, zeroes);\n            }\n            else {\n                arg = arg.split(\"e\");\n                base = +arg[0];\n                zeroes = +arg[1];\n            }\n\n            if (!idx) {\n                value[0] = base;\n                value[1] = zeroes;\n            }\n            else {\n                if (value[1] < zeroes) {\n                    value[0] = value[0] / Math.pow(10, zeroes - value[1]) - base;\n                    value[1] = zeroes;\n                }\n                else {\n                    value[0] -= base / Math.pow(10, value[1] - zeroes);\n                }\n            }\n        }\n        // if(value[0] <= 1e-10){\n        //   return 0;\n        // }\n        let sign = value[0] >= 0 ? 1 : -1; \n        let rbase = Math.abs(value[0]);\n        while (rbase < 1 && value[1] > 0) {\n            rbase *= 10;\n            value[1] -= 1;\n        }\n        while (rbase > 10) {\n            rbase /= 10;\n            value[1] += 1;\n        }\n        rbase *= sign;\n        return `${rbase}e${value[1]}`;\n    }\n    public static BNTimes(...args: any[]) {\n        var value = [0, 0];\n        args.forEach(function (arg, idx) {\n            var base, zeroes;\n            var num = +arg;\n            if (num === 0 || (num && num !== Infinity)) {\n                zeroes = arg < 10 ? 0 : Math.floor(Math.log10(+arg) + 1e-6);\n                base = arg < 10 ? arg : arg / Math.pow(10, zeroes);\n            }\n            else {\n                if (arg) {\n                    arg = arg.split(\"e\");\n                    base = +arg[0] || 0;\n                    zeroes = +arg[1] || 0;\n                }\n                else {\n                    base = 1;\n                    zeroes = 0;\n                }\n            }\n            if (!idx) {\n                value[0] = base;\n                value[1] = zeroes;\n            }\n            else {\n                value[0] *= base;\n                value[1] += zeroes;\n                if (value[0] > 1e300) {\n                    value[0] /= 1e300;\n                    value[1] += 300;\n                }\n            }\n        });\n        \n        let sign = value[0] >= 0 ? 1 : -1; \n        let base = Math.abs(value[0]);\n        while (base < 1 && value[1] > 0) {\n            base *= 10;\n            value[1] -= 1;\n        }\n        while (base > 10) {\n            base /= 10;\n            value[1] += 1;\n        }\n        return `${base * sign}e${value[1]}`;\n    }\n    public static BNDevide(value0, value1) {\n        if (+value1 === 0) {\n            return 0;\n        }\n        var value = [0, 0];\n        let sign:number = 1;\n        [value0, value1].forEach(function (arg, idx) {\n            var base, zeroes;\n            let realNum = +arg;\n            var num = Math.abs(realNum);\n            if (num === 0 || (num && num !== Infinity)) {\n                zeroes = num < 10 ? 0 : Math.floor(Math.log10(num) + 1e-6);\n                base = num < 10 ? num : num / Math.pow(10, zeroes);\n            }\n            else {\n                arg = arg.split(\"e\");\n                realNum = +arg[0];\n                base = Math.abs(realNum);\n                zeroes = +arg[1];\n            }\n\n            sign *= realNum >= 0 ? 1 : -1;\n            if (idx === 0) {\n                value[0] = base;\n                value[1] = zeroes;\n            }\n            else {\n                value[0] /= base;\n                value[1] -= zeroes;\n            }\n        });\n        let base = Math.abs(value[0]);\n        while (base < 1 && value[1] > 0) {\n            base *= 10;\n            value[1] -= 1;\n        }\n        while (base > 10) {\n            base /= 10;\n            value[1] += 1;\n        }\n        base *= sign;\n        if (value[1] < 100) {\n            return base * Math.pow(10, value[1]);\n        }\n        return this.BNTimes(base, this.BNPow(10, value[1]));\n    }\n    public static BNCompare(value0, value1) {\n        var bases = [0, 0];\n        var zeroes = [0, 0];\n        [value0, value1].forEach(function (arg, idx) {\n            var num = +arg;\n            if (num === 0 || (num && num !== Infinity)) {\n                zeroes[idx] = arg < 10 ? 0 : Math.floor(Math.log10(+arg) + 1e-6);\n                bases[idx] = arg < 10 ? arg : arg / Math.pow(10, zeroes[idx]);\n            }\n            else {\n                arg = arg.split(\"e\");\n                bases[idx] = +arg[0];\n                zeroes[idx] = +arg[1];\n            }\n        });\n        return bases[0] * bases[1] < 0 ? (bases[0] > 0 ? 1 : -1) : zeroes[1] > zeroes[0] ? -1 : zeroes[1] < zeroes[0] ? 1 : bases[1] > bases[0] ? -1 : bases[1] < bases[0] ? 1 : 0;\n    }\n    public static BNPow(di, zhi) {\n        if (!di) {\n            return \"0\";\n        }\n        if (!zhi) {\n            return \"1\";\n        }\n        var max = Math.floor(Math.log(1e300) / Math.log(di));\n        max = Math.max(max, 1);\n        var val:BigNumber = 1;\n        if (max >= zhi) {\n            val = Math.pow(di, zhi);\n        } else {\n            var times = Math.floor(zhi / max);\n            let arr = [];\n            var mid = Math.pow(di, max);\n            for (var i = 0; i < times; i++) {\n                arr.push(mid);\n            }\n            arr.push(Math.pow(di, zhi - max * times));\n            val = this.BNTimes.apply(this, arr);\n        }\n        return val;\n    }\n    public static BNMax(value0, value1) {\n        return this.BNCompare(value0, value1) > 0 ? value0 : value1;\n    }\n    public static BNMin(value0, value1) {\n        return this.BNCompare(value0, value1) > 0 ? value1 : value0;\n    }\n    public static BNLog(value) {\n        let num = +value;\n        if (num === 0 || (num && num !== Infinity)) {\n            const sign = num >= 0 ? 1 : -1;\n            num = Math.abs(num);\n            return sign * Math.log10(num);\n        } else {\n            return +value.split(\"e\")[1];\n        }\n    }\n    public static BNSqrt(value){\n        const num = +value;\n        if (num === 0 || (num && num !== Infinity)) {\n            return Math.sqrt(num);\n        }\n        var arr = value.split(\"e\");\n        let a = +arr[0];\n        let b = +arr[1];\n        return `${Math.sqrt(a)}e${b/2}`;\n    }\n\n    public static BNSqrtEx(value, zhi:number){\n        const num = +value;\n        if (num === 0 || (num && num !== Infinity)) {\n            return Math.pow(num, 1/zhi);\n        }\n        var arr = value.split(\"e\");\n        let a = +arr[0];\n        let b = +arr[1];\n        return `${Math.pow(a, 1/zhi)}e${b/zhi}`;\n    }\n\n    public static BNFloor(value){\n        const num = +value;\n        if (num === 0 || (num && num !== Infinity)) {\n            return Math.floor(num);\n        }\n        return value;\n    }\n\n    public static BNCeil(value){\n        const num = +value;\n        if (num === 0 || (num && num !== Infinity)) {\n            return Math.ceil(num);\n        }\n        return value;\n    }\n\n    public static BNRound(value){\n        const num = +value;\n        if (num === 0 || (num && num !== Infinity)) {\n            return Math.round(num);\n        }\n        return value;\n    }\n\n    public static BN2Number(value) {\n        const num = +value;\n        if (num === 0 || (num && num !== Infinity)) {\n            return num;\n        } else {\n            var arr = value.split(\"e\");\n            return +arr[0] * Math.pow(10, arr[1]);\n        }\n    }\n\n    public static getOwnString(n:any){\n        return this.getNumberString(n, undefined, undefined, RountType.Floor);\n    }\n\n    public static getCostString(n:any){\n        return this.getNumberString(n, undefined, undefined, RountType.Ceil);\n    }\n\n    public static getNumberString(n:any, fixed:number = 0, bigFixed?:number, roundType = RountType.Round):string{\n        let _base:number;\n        let tailIdx;\n        const num = +n;\n        if (num === 0 || (num && num !== Infinity)) {\n            if(n < 1000){\n                return this.roundNum(n, roundType, fixed);\n            }\n            let base:string = `${Math.round(n)}`;\n            let digit:number = 0;\n            if(~base.indexOf(\"e\")){\n                //fix bug Math.log10(9.999999999999996e+38)=39\n                let dishu:number = +base.split(\"e\")[0];\n                let zhishu:number = +base.split(\"e\")[1];\n                zhishu += Math.floor(Math.log10(dishu));\n                digit = zhishu;\n            } else {\n                digit = Math.floor(Math.log10(n));\n            }\n            \n            if(~base.indexOf(\"e\")){\n                _base = +base.split(\"e\")[0] * Math.pow(10,digit % 3);\n            }\n            else{\n                _base = +base.slice(0, digit % 3 + 4) / 1000;\n            }\n            tailIdx = digit / 3 >> 0;\n        }\n        else{\n            n = n.split(\"e\");\n            if(+n[1] < 3){\n                let v = n[0] * Math.pow(10,n[1]);\n                return this.roundNum(v, roundType, fixed);\n            }\n            _base = n[0] * Math.pow(10,n[1] % 3);\n            while(_base > 1000){\n                _base /= 1000;\n                n[1] = +n[1] + 3;\n            }\n            tailIdx = n[1] / 3 >> 0;\n        }\n        var tail;\n        if(tailIdx < 4){\n            tail = [\"\",\"K\",\"M\",\"B\"][tailIdx];\n        }\n        else{\n            var first = (tailIdx - 4) / 26 >> 0;\n\n            var grade = first / 26 >> 0;\n\n            var second = (tailIdx - 4) % 26;\n            var a = \"abcdefghijklmnopqrstuvwxyz\";\n            var b = a.toUpperCase();\n\n            tail = (grade < 2 ? a : b)[first % 26] + (grade % 2 ? b : a)[second];\n        }\n\n        if(bigFixed === undefined){\n            bigFixed = _base < 10 ? 2 : _base < 100 ? 1 : 0\n        }\n        const baseStr = this.roundNum(_base, roundType, bigFixed);\n        return baseStr + tail;\n    }\n\n    private static roundNum(n:number, type:RountType, fixed:number){\n        let func;\n        if(type === RountType.Round){\n            func = Math.round;\n        } else if(type === RountType.Ceil){\n            func = Math.ceil;\n        } else {\n            func = Math.floor;\n        }\n        let val:number;\n        if(fixed === 0){\n            val = func(n);\n        } else {\n            const b = Math.pow(10, fixed);\n            val = func(b * n) / b;\n        }\n        return val.toFixed(fixed);\n    }\n\n    public static getFixNumber(num:number, fixed:number = 1) {\n        const b = Math.pow(10, fixed)\n        return Math.floor(num * b) / b;\n    }\n\n    public static getPercentString(num:BigNumber, fixed:number = 1){\n        if(typeof num === 'string'){\n            return this.getNumberString(this.BNTimes(num, 100), fixed) + '%';\n        } else {\n            return this.getNumberString(num * 100, fixed) + '%';\n        }\n    }\n}"]}