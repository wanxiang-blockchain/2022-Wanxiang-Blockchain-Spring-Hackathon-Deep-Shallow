{"version":3,"sources":["assets/Script/UIFrame/ResMgr.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import CocosHelper from \"./CocosHelper\";\nimport UIBase from \"./UIBase\";\nimport { EventCenter } from \"./EventCenter\";\n\n/**\n * 资源加载, 针对的是Form\n * 首先将资源分为两类\n * 一种是在编辑器时将其拖上去图片, 这里将其称为静态图片, \n * 一种是在代码中使用cc.loader加载的图片, 这里将其称为动态图片\n * \n * 对于静态资源\n * 1, 加载  在加载prefab时, cocos会将其依赖的图片一并加载, 所有不需要我们担心\n * 2, 释放  这里采用的引用计数的管理方法, 只需要调用destoryForm即可\n * \n * 加载一个窗体\n * 第一步 加载prefab, 第二步 实例化prefab 获得 node\n * 所以销毁一个窗体 也需要两步, 销毁node, 销毁prefab\n */\nexport default class ResMgr {\n    private static instance: ResMgr = null;\n    public static get inst() {\n        if(this.instance === null) {\n            this.instance = new ResMgr();\n        }\n        return this.instance;\n    }\n\n    /** \n     * 采用计数管理的办法, 管理form所依赖的资源\n     */\n    private _prefabDepends: {[key: string]: Array<string>} = cc.js.createMap();\n    private _dynamicTags: {[key: string]: Array<string>} = cc.js.createMap();       \n\n    private _tmpAssetsDepends: string[] = [];                                       // 临时缓存\n    private _assetsReference: {[key: string]: number} = cc.js.createMap();          // 资源引用计数\n\n    private _prefabs: {[key: string]: cc.Prefab} = cc.js.createMap();               // 预制体缓存\n\n    \n    /** 加载窗体 */\n    public async loadFormPrefab(fid: string) {\n        if(this._prefabs[fid]) return this._prefabs[fid];\n        let {res, deps} = await this._loadResWithReference<cc.Prefab>(fid, cc.Prefab);\n        this._prefabDepends[fid] = deps;\n        this._prefabs[fid] = res;\n        return res;\n    }\n\n    /** 销毁窗体 */\n    public destoryFormPrefab(fid: string) {\n        if(this._prefabs[fid]) {\n            this._prefabs[fid].destroy();\n            this._prefabs[fid] = null;\n            delete this._prefabs[fid];\n        }\n        // 销毁依赖的资源\n        this._destoryResWithReference(this._prefabDepends[fid]);\n        // 删除缓存\n        this._prefabDepends[fid] = null;\n        delete this._prefabDepends[fid];\n    }\n\n\n    /** 动态资源管理, 通过tag标记当前资源, 统一释放 */\n    public async loadDynamicRes<T>(url: string, type: typeof cc.Asset, tag: string) {\n        let {res, deps} = await this._loadResWithReference<T>(url, type);\n        if(!this._dynamicTags[tag]) {\n            this._dynamicTags[tag] = [];\n        }\n        this._dynamicTags[tag].push(...deps);\n        return res;\n    }\n\n    /** 销毁动态资源  */\n    public destoryDynamicRes(tag: string) {\n        if(!this._dynamicTags[tag]) {       // 销毁\n            return false;\n        }\n        this._destoryResWithReference(this._dynamicTags[tag])\n        \n        this._dynamicTags[tag] = null;\n        delete this._dynamicTags[tag];\n\n        return true;\n    }\n\n\n    /** 加载资源并添加引用计数 */\n    private async _loadResWithReference<T>(url: string, type: typeof cc.Asset) {\n        let res = await CocosHelper.loadResSync<T>(url, type, this._addTmpAssetsDepends.bind(this));\n        if(!res) {\n            this._clearTmpAssetsDepends();    \n            return null;\n        }\n        this._clearTmpAssetsDepends();\n        let deps = cc.assetManager.dependUtil.getDepsRecursively(res['_uuid']) || [];\n        deps.push(res['_uuid']);\n        this.addAssetsDepends(deps);\n\n        return {\n            res: res,\n            deps: deps\n        };\n    }\n\n    /** 更加引用销毁资源 */\n    private _destoryResWithReference(deps: string[]) {\n        let _toDeletes = this.removeAssetsDepends(deps);\n        this._destoryAssets(_toDeletes);\n        return true;\n    } \n\n    /** 添加资源计数 */\n    private addAssetsDepends(deps: Array<string>) {\n        for(let s of deps) {\n            if(this._checkIsBuiltinAssets(s)) continue;\n            if(this._assetsReference[s]) {\n                this._assetsReference[s] += 1;\n            }else {\n                this._assetsReference[s] = 1;\n            }\n        }\n    }\n    /** 删除资源计数 */\n    private removeAssetsDepends(deps: Array<string>) {\n        let _deletes: string[] = [];\n        for(let s of deps) {\n            if(!this._assetsReference[s] || this._assetsReference[s] === 0) continue;\n            this._assetsReference[s] --;\n            if(this._assetsReference[s] === 0) {     \n                _deletes.push(s);\n                delete this._assetsReference[s];                  // 删除key;\n            }\n        }\n        return _deletes;\n    }\n    private _destoryAssets(urls: string[]) {\n        for(const url of urls) {\n            this._destoryAsset(url);\n        }\n    }\n    /** 销毁资源 */\n    private _destoryAsset(url: string) {\n        if(this._checkIsBuiltinAssets(url)) return;\n        cc.assetManager.assets.remove(url);               // 从缓存中清除\n        let asset = cc.assetManager.assets.get(url);      // 销毁该资源\n        asset && asset.destroy();\n        cc.assetManager.dependUtil['remove'](url);        // 从依赖中删除\n    }\n\n    /** 临时添加资源计数 */\n    private _addTmpAssetsDepends(completedCount: number, totalCount: number, item: any) {\n        let deps = (cc.assetManager.dependUtil.getDepsRecursively(item.uuid) || []);\n        deps.push(item.uuid);\n        this.addAssetsDepends(deps);\n\n        this._tmpAssetsDepends.push(...deps);\n    }\n    /** 删除临时添加的计数 */\n    private _clearTmpAssetsDepends() {\n        for(let s of this._tmpAssetsDepends) {\n            if(!this._assetsReference[s] || this._assetsReference[s] === 0) continue;\n            this._assetsReference[s] --;\n            if(this._assetsReference[s] === 0) {\n                delete this._assetsReference[s];           // 这里不清理缓存\n            }\n        }\n        this._tmpAssetsDepends = [];\n    }\n\n    /** 检查是否是builtin内的资源 */\n    private _checkIsBuiltinAssets(url: string) {\n        let asset = cc.assetManager.assets.get(url);\n        if(asset && asset['_name'].indexOf(\"builtin\") != -1) {\n            return true;\n        }\n        return false;\n    }\n\n    /** 计算当前纹理数量和缓存 */\n    public computeTextureCache() {\n        let cache = cc.assetManager.assets;\n        let totalTextureSize = 0;\n        let count = 0;\n        cache.forEach((item: cc.Asset, key: string) => {            \n            let type = (item && item['__classname__']) ? item['__classname__'] : '';\n            if(type == 'cc.Texture2D') {\n                let texture = item as cc.Texture2D;\n                let textureSize = texture.width * texture.height * ((texture['_native'] === '.jpg' ? 3 : 4) / 1024 / 1024);\n                // debugger\n                totalTextureSize += textureSize;\n                count ++;\n            }\n        });\n        return `缓存 [纹理总数:${count}][纹理缓存:${totalTextureSize.toFixed(2) + 'M'}]`;\n    }\n\n}"]}